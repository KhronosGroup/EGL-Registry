DIAG: *******************************************
DIAG:   Registry.apiGen file: EGL/eglext.h api: egl profile: None
DIAG: *******************************************
DIAG: *** NOT tagging feature api = egl name = EGL_VERSION_1_0 number = 1.0 for emission (does not match emitversions pattern)
DIAG: *** NOT tagging feature api = egl name = EGL_VERSION_1_1 number = 1.1 for emission (does not match emitversions pattern)
DIAG: *** NOT tagging feature api = egl name = EGL_VERSION_1_2 number = 1.2 for emission (does not match emitversions pattern)
DIAG: *** NOT tagging feature api = egl name = EGL_VERSION_1_3 number = 1.3 for emission (does not match emitversions pattern)
DIAG: *** NOT tagging feature api = egl name = EGL_VERSION_1_4 number = 1.4 for emission (does not match emitversions pattern)
DIAG: *** NOT tagging feature api = egl name = EGL_VERSION_1_5 number = 1.5 for emission (does not match emitversions pattern)
DIAG: *** Including extension EGL_ANDROID_blob_cache (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_create_native_client_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_framebuffer_target (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_get_native_client_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_front_buffer_auto_refresh (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_image_native_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_native_fence_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_presentation_time (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_get_frame_timestamps (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_recordable (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANDROID_GLES_layers (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANGLE_d3d_share_handle_client_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANGLE_device_d3d (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANGLE_query_surface_pointer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANGLE_surface_d3d_texture_2d_share_handle (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANGLE_sync_control_rate (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ANGLE_window_fixed_size (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ARM_implicit_external_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ARM_pixmap_multisample_discard (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_buffer_age (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_client_extensions (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_client_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_config_select_group (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_create_context_robustness (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_base (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_drm (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_enumeration (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_openwf (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_query (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_bt2020_linear (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_bt2020_pq (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_scrgb (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_scrgb_linear (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_display_p3_linear (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_display_p3 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_gl_colorspace_display_p3_passthrough (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_image_dma_buf_import (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_image_dma_buf_import_modifiers (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_image_gl_colorspace (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_multiview_window (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_output_base (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_output_drm (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_output_openwf (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_pixel_format_float (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_platform_base (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_platform_device (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_platform_wayland (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_platform_x11 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_platform_xcb (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_present_opaque (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_protected_content (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_protected_surface (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_stream_consumer_egloutput (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_surface_SMPTE2086_metadata (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_swap_buffers_with_damage (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_sync_reuse (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_yuv_surface (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_HI_clientpixmap (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_HI_colorformats (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_IMG_context_priority (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_IMG_image_plane_attribs (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_cl_event (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_cl_event2 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_config_attribs (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_client_get_all_proc_addresses (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_context_flush_control (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_create_context (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_create_context_no_error (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_debug (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_display_reference (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_fence_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_get_all_proc_addresses (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_gl_colorspace (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_gl_renderbuffer_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_gl_texture_2D_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_gl_texture_3D_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_gl_texture_cubemap_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_image_base (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_image_pixmap (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_lock_surface (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_lock_surface2 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_lock_surface3 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_mutable_render_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_no_config_context (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_partial_update (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_platform_android (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_platform_gbm (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_platform_wayland (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_platform_x11 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_reusable_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream_attrib (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream_consumer_gltexture (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream_cross_process_fd (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream_fifo (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream_producer_aldatalocator (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_stream_producer_eglsurface (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_surfaceless_context (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_swap_buffers_with_damage (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_vg_parent_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_KHR_wait_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_MESA_drm_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_MESA_image_dma_buf_export (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_MESA_platform_gbm (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_MESA_platform_surfaceless (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_MESA_query_driver (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NOK_swap_region (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NOK_swap_region2 (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NOK_texture_from_pixmap (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_3dvision_surface (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_coverage_sample (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_context_priority_realtime (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_coverage_sample_resolve (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_cuda_event (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_depth_nonlinear (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_device_cuda (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_native_query (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_post_convert_rounding (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_post_sub_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_quadruple_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_robustness_video_memory_purge (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_consumer_gltexture_yuv (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_cross_object (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_cross_display (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_cross_partition (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_cross_process (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_cross_system (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_dma (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_consumer_eglimage (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_fifo_next (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_fifo_synchronous (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_flush (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_frame_limits (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_metadata (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_reset (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_remote (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_socket (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_socket_inet (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_socket_unix (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_sync (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_system_time (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_triple_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_TIZEN_image_native_buffer (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_TIZEN_image_native_surface (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_compositor (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_surface_CTA861_3_metadata (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_surface_compression (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_image_implicit_sync_control (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_bind_to_front (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_NV_stream_origin (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_WL_bind_wayland_display (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_WL_create_wayland_buffer_from_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_ARM_image_format (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_query_name (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_persistent_id (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_device_drm_render_node (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_EXT_explicit_device (defaultExtensions matches the 'supported' attribute)
DIAG: *** Including extension EGL_MESA_gl_texture_cubemap_image (defaultExtensions matches the 'supported' attribute)
DIAG: *** PASS 1: TAG FEATURES ********************************************
DIAG: *** PASS 1: Tagging required and removed features for EGL_VERSION_1_0
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_ALPHA_SIZE -> required = True
DIAG: *** tagging enum: EGL_BAD_ACCESS -> required = True
DIAG: *** tagging enum: EGL_BAD_ALLOC -> required = True
DIAG: *** tagging enum: EGL_BAD_ATTRIBUTE -> required = True
DIAG: *** tagging enum: EGL_BAD_CONFIG -> required = True
DIAG: *** tagging enum: EGL_BAD_CONTEXT -> required = True
DIAG: *** tagging enum: EGL_BAD_CURRENT_SURFACE -> required = True
DIAG: *** tagging enum: EGL_BAD_DISPLAY -> required = True
DIAG: *** tagging enum: EGL_BAD_MATCH -> required = True
DIAG: *** tagging enum: EGL_BAD_NATIVE_PIXMAP -> required = True
DIAG: *** tagging enum: EGL_BAD_NATIVE_WINDOW -> required = True
DIAG: *** tagging enum: EGL_BAD_PARAMETER -> required = True
DIAG: *** tagging enum: EGL_BAD_SURFACE -> required = True
DIAG: *** tagging enum: EGL_BLUE_SIZE -> required = True
DIAG: *** tagging enum: EGL_BUFFER_SIZE -> required = True
DIAG: *** tagging enum: EGL_CONFIG_CAVEAT -> required = True
DIAG: *** tagging enum: EGL_CONFIG_ID -> required = True
DIAG: *** tagging enum: EGL_CORE_NATIVE_ENGINE -> required = True
DIAG: *** tagging enum: EGL_DEPTH_SIZE -> required = True
DIAG: *** tagging enum: EGL_DONT_CARE -> required = True
DIAG: *** tagging enum: EGL_DRAW -> required = True
DIAG: *** tagging enum: EGL_EXTENSIONS -> required = True
DIAG: *** tagging enum: EGL_FALSE -> required = True
DIAG: *** tagging enum: EGL_GREEN_SIZE -> required = True
DIAG: *** tagging enum: EGL_HEIGHT -> required = True
DIAG: *** tagging enum: EGL_LARGEST_PBUFFER -> required = True
DIAG: *** tagging enum: EGL_LEVEL -> required = True
DIAG: *** tagging enum: EGL_MAX_PBUFFER_HEIGHT -> required = True
DIAG: *** tagging enum: EGL_MAX_PBUFFER_PIXELS -> required = True
DIAG: *** tagging enum: EGL_MAX_PBUFFER_WIDTH -> required = True
DIAG: *** tagging enum: EGL_NATIVE_RENDERABLE -> required = True
DIAG: *** tagging enum: EGL_NATIVE_VISUAL_ID -> required = True
DIAG: *** tagging enum: EGL_NATIVE_VISUAL_TYPE -> required = True
DIAG: *** tagging enum: EGL_NONE -> required = True
DIAG: *** tagging enum: EGL_NON_CONFORMANT_CONFIG -> required = True
DIAG: *** tagging enum: EGL_NOT_INITIALIZED -> required = True
DIAG: *** tagging enum: EGL_NO_CONTEXT -> required = True
DIAG: *** tagging enum: EGL_NO_DISPLAY -> required = True
DIAG: *** tagging enum: EGL_NO_SURFACE -> required = True
DIAG: *** tagging enum: EGL_PBUFFER_BIT -> required = True
DIAG: *** tagging enum: EGL_PIXMAP_BIT -> required = True
DIAG: *** tagging enum: EGL_READ -> required = True
DIAG: *** tagging enum: EGL_RED_SIZE -> required = True
DIAG: *** tagging enum: EGL_SAMPLES -> required = True
DIAG: *** tagging enum: EGL_SAMPLE_BUFFERS -> required = True
DIAG: *** tagging enum: EGL_SLOW_CONFIG -> required = True
DIAG: *** tagging enum: EGL_STENCIL_SIZE -> required = True
DIAG: *** tagging enum: EGL_SUCCESS -> required = True
DIAG: *** tagging enum: EGL_SURFACE_TYPE -> required = True
DIAG: *** tagging enum: EGL_TRANSPARENT_BLUE_VALUE -> required = True
DIAG: *** tagging enum: EGL_TRANSPARENT_GREEN_VALUE -> required = True
DIAG: *** tagging enum: EGL_TRANSPARENT_RED_VALUE -> required = True
DIAG: *** tagging enum: EGL_TRANSPARENT_RGB -> required = True
DIAG: *** tagging enum: EGL_TRANSPARENT_TYPE -> required = True
DIAG: *** tagging enum: EGL_TRUE -> required = True
DIAG: *** tagging enum: EGL_VENDOR -> required = True
DIAG: *** tagging enum: EGL_VERSION -> required = True
DIAG: *** tagging enum: EGL_WIDTH -> required = True
DIAG: *** tagging enum: EGL_WINDOW_BIT -> required = True
DIAG: *** tagging command: eglChooseConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCopyBuffers -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativePixmapType
DIAG: *** tagging type: EGLNativePixmapType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativePixmapType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreateContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreatePbufferSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreatePixmapSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativePixmapType
DIAG: *** tagging type: EGLNativePixmapType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativePixmapType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreateWindowSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativeWindowType
DIAG: *** tagging type: EGLNativeWindowType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativeWindowType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroyContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** tagging command: eglDestroySurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** tagging command: eglGetConfigAttrib -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetConfigs -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetCurrentDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** tagging command: eglGetCurrentSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativeDisplayType
DIAG: *** tagging type: EGLNativeDisplayType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativeDisplayType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetError -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetProcAddress -> required = True
DIAG: *** markRequired: command implicitly requires dependent type __eglMustCastToProperFunctionPointerType
DIAG: *** tagging type: __eglMustCastToProperFunctionPointerType -> required = True
DIAG: *** tagging command: eglInitialize -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglMakeCurrent -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** tagging command: eglQueryContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryString -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQuerySurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSwapBuffers -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** tagging command: eglTerminate -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** tagging command: eglWaitGL -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** tagging command: eglWaitNative -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_VERSION_1_1
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_BACK_BUFFER -> required = True
DIAG: *** tagging enum: EGL_BIND_TO_TEXTURE_RGB -> required = True
DIAG: *** tagging enum: EGL_BIND_TO_TEXTURE_RGBA -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_LOST -> required = True
DIAG: *** tagging enum: EGL_MIN_SWAP_INTERVAL -> required = True
DIAG: *** tagging enum: EGL_MAX_SWAP_INTERVAL -> required = True
DIAG: *** tagging enum: EGL_MIPMAP_TEXTURE -> required = True
DIAG: *** tagging enum: EGL_MIPMAP_LEVEL -> required = True
DIAG: *** tagging enum: EGL_NO_TEXTURE -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_2D -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_FORMAT -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_RGB -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_RGBA -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_TARGET -> required = True
DIAG: *** tagging command: eglBindTexImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglReleaseTexImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSurfaceAttrib -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSwapInterval -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_VERSION_1_2
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_ALPHA_FORMAT -> required = True
DIAG: *** tagging enum: EGL_ALPHA_FORMAT_NONPRE -> required = True
DIAG: *** tagging enum: EGL_ALPHA_FORMAT_PRE -> required = True
DIAG: *** tagging enum: EGL_ALPHA_MASK_SIZE -> required = True
DIAG: *** tagging enum: EGL_BUFFER_PRESERVED -> required = True
DIAG: *** tagging enum: EGL_BUFFER_DESTROYED -> required = True
DIAG: *** tagging enum: EGL_CLIENT_APIS -> required = True
DIAG: *** tagging enum: EGL_COLORSPACE -> required = True
DIAG: *** tagging enum: EGL_COLORSPACE_sRGB -> required = True
DIAG: *** tagging enum: EGL_COLORSPACE_LINEAR -> required = True
DIAG: *** tagging enum: EGL_COLOR_BUFFER_TYPE -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_CLIENT_TYPE -> required = True
DIAG: *** tagging enum: EGL_DISPLAY_SCALING -> required = True
DIAG: *** tagging enum: EGL_HORIZONTAL_RESOLUTION -> required = True
DIAG: *** tagging enum: EGL_LUMINANCE_BUFFER -> required = True
DIAG: *** tagging enum: EGL_LUMINANCE_SIZE -> required = True
DIAG: *** tagging enum: EGL_OPENGL_ES_BIT -> required = True
DIAG: *** tagging enum: EGL_OPENVG_BIT -> required = True
DIAG: *** tagging enum: EGL_OPENGL_ES_API -> required = True
DIAG: *** tagging enum: EGL_OPENVG_API -> required = True
DIAG: *** tagging enum: EGL_OPENVG_IMAGE -> required = True
DIAG: *** tagging enum: EGL_PIXEL_ASPECT_RATIO -> required = True
DIAG: *** tagging enum: EGL_RENDERABLE_TYPE -> required = True
DIAG: *** tagging enum: EGL_RENDER_BUFFER -> required = True
DIAG: *** tagging enum: EGL_RGB_BUFFER -> required = True
DIAG: *** tagging enum: EGL_SINGLE_BUFFER -> required = True
DIAG: *** tagging enum: EGL_SWAP_BEHAVIOR -> required = True
DIAG: *** tagging enum: EGL_UNKNOWN -> required = True
DIAG: *** tagging enum: EGL_VERTICAL_RESOLUTION -> required = True
DIAG: *** tagging command: eglBindAPI -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** tagging command: eglQueryAPI -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** tagging command: eglCreatePbufferFromClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientBuffer
DIAG: *** tagging type: EGLClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglReleaseThread -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** tagging command: eglWaitClient -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_VERSION_1_3
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONFORMANT -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_CLIENT_VERSION -> required = True
DIAG: *** tagging enum: EGL_MATCH_NATIVE_PIXMAP -> required = True
DIAG: *** tagging enum: EGL_OPENGL_ES2_BIT -> required = True
DIAG: *** tagging enum: EGL_VG_ALPHA_FORMAT -> required = True
DIAG: *** tagging enum: EGL_VG_ALPHA_FORMAT_NONPRE -> required = True
DIAG: *** tagging enum: EGL_VG_ALPHA_FORMAT_PRE -> required = True
DIAG: *** tagging enum: EGL_VG_ALPHA_FORMAT_PRE_BIT -> required = True
DIAG: *** tagging enum: EGL_VG_COLORSPACE -> required = True
DIAG: *** tagging enum: EGL_VG_COLORSPACE_sRGB -> required = True
DIAG: *** tagging enum: EGL_VG_COLORSPACE_LINEAR -> required = True
DIAG: *** tagging enum: EGL_VG_COLORSPACE_LINEAR_BIT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_VERSION_1_4
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DEFAULT_DISPLAY -> required = True
DIAG: *** tagging enum: EGL_MULTISAMPLE_RESOLVE_BOX_BIT -> required = True
DIAG: *** tagging enum: EGL_MULTISAMPLE_RESOLVE -> required = True
DIAG: *** tagging enum: EGL_MULTISAMPLE_RESOLVE_DEFAULT -> required = True
DIAG: *** tagging enum: EGL_MULTISAMPLE_RESOLVE_BOX -> required = True
DIAG: *** tagging enum: EGL_OPENGL_API -> required = True
DIAG: *** tagging enum: EGL_OPENGL_BIT -> required = True
DIAG: *** tagging enum: EGL_SWAP_BEHAVIOR_PRESERVED_BIT -> required = True
DIAG: *** tagging command: eglGetCurrentContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_VERSION_1_5
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_MAJOR_VERSION -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_MINOR_VERSION -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_PROFILE_MASK -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY -> required = True
DIAG: *** tagging enum: EGL_NO_RESET_NOTIFICATION -> required = True
DIAG: *** tagging enum: EGL_LOSE_CONTEXT_ON_RESET -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_DEBUG -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_ROBUST_ACCESS -> required = True
DIAG: *** tagging enum: EGL_OPENGL_ES3_BIT -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_ROBUST_ACCESS -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CL_EVENT_HANDLE -> required = True
DIAG: *** tagging enum: EGL_SYNC_CL_EVENT -> required = True
DIAG: *** tagging enum: EGL_SYNC_CL_EVENT_COMPLETE -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_PRIOR_COMMANDS_COMPLETE -> required = True
DIAG: *** tagging enum: EGL_SYNC_TYPE -> required = True
DIAG: *** tagging enum: EGL_SYNC_STATUS -> required = True
DIAG: *** tagging enum: EGL_SYNC_CONDITION -> required = True
DIAG: *** tagging enum: EGL_SIGNALED -> required = True
DIAG: *** tagging enum: EGL_UNSIGNALED -> required = True
DIAG: *** tagging enum: EGL_SYNC_FLUSH_COMMANDS_BIT -> required = True
DIAG: *** tagging enum: EGL_FOREVER -> required = True
DIAG: *** tagging enum: EGL_TIMEOUT_EXPIRED -> required = True
DIAG: *** tagging enum: EGL_CONDITION_SATISFIED -> required = True
DIAG: *** tagging enum: EGL_NO_SYNC -> required = True
DIAG: *** tagging enum: EGL_SYNC_FENCE -> required = True
DIAG: *** tagging command: eglCreateSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroySync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** tagging command: eglClientWaitSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLTime
DIAG: *** tagging type: EGLTime -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLTime
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetSyncAttrib -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE -> required = True
DIAG: *** tagging enum: EGL_GL_COLORSPACE_SRGB -> required = True
DIAG: *** tagging enum: EGL_GL_COLORSPACE_LINEAR -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_RENDERBUFFER -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_2D -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_LEVEL -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_3D -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_ZOFFSET -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_IMAGE_PRESERVED -> required = True
DIAG: *** tagging enum: EGL_NO_IMAGE -> required = True
DIAG: *** tagging command: eglCreateImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImage
DIAG: *** tagging type: EGLImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientBuffer
DIAG: *** tagging type: EGLClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroyImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImage
DIAG: *** tagging type: EGLImage -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglGetPlatformDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreatePlatformWindowSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreatePlatformPixmapSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglWaitSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_cl_event
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CL_EVENT_HANDLE_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_CL_EVENT_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_CL_EVENT_COMPLETE_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_cl_event2
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CL_EVENT_HANDLE_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_CL_EVENT_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_CL_EVENT_COMPLETE_KHR -> required = True
DIAG: *** tagging command: eglCreateSync64KHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttribKHR
DIAG: *** tagging type: EGLAttribKHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttribKHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_client_get_all_proc_addresses
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_config_attribs
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONFORMANT_KHR -> required = True
DIAG: *** tagging enum: EGL_VG_COLORSPACE_LINEAR_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_context_flush_control
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_RELEASE_BEHAVIOR_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_create_context
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_MAJOR_VERSION_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_MINOR_VERSION_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_FLAGS_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR -> required = True
DIAG: *** tagging enum: EGL_NO_RESET_NOTIFICATION_KHR -> required = True
DIAG: *** tagging enum: EGL_LOSE_CONTEXT_ON_RESET_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_OPENGL_ES3_BIT -> required = True
DIAG: *** tagging enum: EGL_OPENGL_ES3_BIT_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_create_context_no_error
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_NO_ERROR_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_debug
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging type: EGLLabelKHR -> required = True
DIAG: *** tagging type: EGLObjectKHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_THREAD_KHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_DISPLAY_KHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_CONTEXT_KHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_SURFACE_KHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_IMAGE_KHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_SYNC_KHR -> required = True
DIAG: *** tagging enum: EGL_OBJECT_STREAM_KHR -> required = True
DIAG: *** tagging enum: EGL_DEBUG_MSG_CRITICAL_KHR -> required = True
DIAG: *** tagging enum: EGL_DEBUG_MSG_ERROR_KHR -> required = True
DIAG: *** tagging enum: EGL_DEBUG_MSG_WARN_KHR -> required = True
DIAG: *** tagging enum: EGL_DEBUG_MSG_INFO_KHR -> required = True
DIAG: *** tagging enum: EGL_DEBUG_CALLBACK_KHR -> required = True
DIAG: *** tagging command: eglDebugMessageControlKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDEBUGPROCKHR
DIAG: *** tagging type: EGLDEBUGPROCKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDebugKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglLabelObjectKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLObjectKHR
DIAG: *** tagging type: EGLObjectKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLLabelKHR
DIAG: *** tagging type: EGLLabelKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_display_reference
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_TRACK_REFERENCES_KHR -> required = True
DIAG: *** tagging command: eglQueryDisplayAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_fence_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_CONDITION_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_FENCE_KHR -> required = True
DIAG: *** tagging command: eglCreateSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroySyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** tagging command: eglClientWaitSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLTimeKHR
DIAG: *** tagging type: EGLTimeKHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLTimeKHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetSyncAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_get_all_proc_addresses
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_gl_colorspace
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_COLORSPACE_SRGB_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_COLORSPACE_LINEAR_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_gl_renderbuffer_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_RENDERBUFFER_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_gl_texture_2D_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_2D_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_LEVEL_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_gl_texture_3D_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_3D_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_ZOFFSET_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_gl_texture_cubemap_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR -> required = True
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_PIXMAP_KHR -> required = True
DIAG: *** tagging enum: EGL_NO_IMAGE_KHR -> required = True
DIAG: *** tagging command: eglCreateImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientBuffer
DIAG: *** tagging type: EGLClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroyImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_image_base
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_IMAGE_PRESERVED_KHR -> required = True
DIAG: *** tagging enum: EGL_NO_IMAGE_KHR -> required = True
DIAG: *** tagging command: eglCreateImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLContext
DIAG: *** tagging type: EGLContext -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientBuffer
DIAG: *** tagging type: EGLClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroyImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_image_pixmap
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_PIXMAP_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_lock_surface
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_READ_SURFACE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_WRITE_SURFACE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_LOCK_SURFACE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_OPTIMAL_FORMAT_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_MATCH_FORMAT_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGB_565_EXACT_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGB_565_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGBA_8888_EXACT_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGBA_8888_KHR -> required = True
DIAG: *** tagging enum: EGL_MAP_PRESERVE_PIXELS_KHR -> required = True
DIAG: *** tagging enum: EGL_LOCK_USAGE_HINT_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_POINTER_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PITCH_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_ORIGIN_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_RED_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_LOWER_LEFT_KHR -> required = True
DIAG: *** tagging enum: EGL_UPPER_LEFT_KHR -> required = True
DIAG: *** tagging command: eglLockSurfaceKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglUnlockSurfaceKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_lock_surface2
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_SIZE_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_lock_surface3
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_READ_SURFACE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_WRITE_SURFACE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_LOCK_SURFACE_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_OPTIMAL_FORMAT_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_MATCH_FORMAT_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGB_565_EXACT_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGB_565_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGBA_8888_EXACT_KHR -> required = True
DIAG: *** tagging enum: EGL_FORMAT_RGBA_8888_KHR -> required = True
DIAG: *** tagging enum: EGL_MAP_PRESERVE_PIXELS_KHR -> required = True
DIAG: *** tagging enum: EGL_LOCK_USAGE_HINT_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PITCH_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_ORIGIN_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_RED_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_PIXEL_SIZE_KHR -> required = True
DIAG: *** tagging enum: EGL_BITMAP_POINTER_KHR -> required = True
DIAG: *** tagging enum: EGL_LOWER_LEFT_KHR -> required = True
DIAG: *** tagging enum: EGL_UPPER_LEFT_KHR -> required = True
DIAG: *** tagging command: eglLockSurfaceKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglUnlockSurfaceKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** tagging command: eglQuerySurface64KHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttribKHR
DIAG: *** tagging type: EGLAttribKHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttribKHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_mutable_render_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_MUTABLE_RENDER_BUFFER_BIT_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_no_config_context
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NO_CONFIG_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_partial_update
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_BUFFER_AGE_KHR -> required = True
DIAG: *** tagging command: eglSetDamageRegionKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_platform_android
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_ANDROID_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_platform_gbm
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_GBM_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_platform_wayland
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_WAYLAND_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_platform_x11
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_X11_KHR -> required = True
DIAG: *** tagging enum: EGL_PLATFORM_X11_SCREEN_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_reusable_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_STATUS_KHR -> required = True
DIAG: *** tagging enum: EGL_SIGNALED_KHR -> required = True
DIAG: *** tagging enum: EGL_UNSIGNALED_KHR -> required = True
DIAG: *** tagging enum: EGL_TIMEOUT_EXPIRED_KHR -> required = True
DIAG: *** tagging enum: EGL_CONDITION_SATISFIED_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_TYPE_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_REUSABLE_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_FLUSH_COMMANDS_BIT_KHR -> required = True
DIAG: *** tagging enum: EGL_FOREVER_KHR -> required = True
DIAG: *** tagging enum: EGL_NO_SYNC_KHR -> required = True
DIAG: *** tagging command: eglCreateSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroySyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** tagging command: eglClientWaitSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLTimeKHR
DIAG: *** tagging type: EGLTimeKHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLTimeKHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSignalSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** tagging command: eglGetSyncAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NO_STREAM_KHR -> required = True
DIAG: *** tagging enum: EGL_CONSUMER_LATENCY_USEC_KHR -> required = True
DIAG: *** tagging enum: EGL_PRODUCER_FRAME_KHR -> required = True
DIAG: *** tagging enum: EGL_CONSUMER_FRAME_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_CREATED_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_CONNECTING_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_EMPTY_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_DISCONNECTED_KHR -> required = True
DIAG: *** tagging enum: EGL_BAD_STREAM_KHR -> required = True
DIAG: *** tagging enum: EGL_BAD_STATE_KHR -> required = True
DIAG: *** tagging command: eglCreateStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroyStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** tagging command: eglStreamAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryStreamu64KHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64KHR
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream_attrib
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONSUMER_LATENCY_USEC_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_CREATED_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_STATE_CONNECTING_KHR -> required = True
DIAG: *** tagging command: eglCreateStreamAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSetStreamAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryStreamAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglStreamConsumerAcquireAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglStreamConsumerReleaseAttribKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream_consumer_gltexture
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR -> required = True
DIAG: *** tagging command: eglStreamConsumerGLTextureExternalKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** tagging command: eglStreamConsumerAcquireKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** tagging command: eglStreamConsumerReleaseKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream_cross_process_fd
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NO_FILE_DESCRIPTOR_KHR -> required = True
DIAG: *** tagging command: eglGetStreamFileDescriptorKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativeFileDescriptorKHR
DIAG: *** tagging type: EGLNativeFileDescriptorKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** tagging command: eglCreateStreamFromFileDescriptorKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativeFileDescriptorKHR
DIAG: *** tagging type: EGLNativeFileDescriptorKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream_fifo
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_FIFO_LENGTH_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_TIME_NOW_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_TIME_CONSUMER_KHR -> required = True
DIAG: *** tagging enum: EGL_STREAM_TIME_PRODUCER_KHR -> required = True
DIAG: *** tagging command: eglQueryStreamTimeKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLTimeKHR
DIAG: *** tagging type: EGLTimeKHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLTimeKHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream_producer_aldatalocator
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_stream_producer_eglsurface
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_BIT_KHR -> required = True
DIAG: *** tagging command: eglCreateStreamProducerSurfaceKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_surfaceless_context
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_swap_buffers_with_damage
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglSwapBuffersWithDamageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_vg_parent_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_VG_PARENT_IMAGE_KHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_KHR_wait_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglWaitSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_GLES_layers
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_blob_cache
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglSetBlobCacheFuncsANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSetBlobFuncANDROID
DIAG: *** tagging type: EGLSetBlobFuncANDROID -> required = True
DIAG: *** Generating dependent type EGLsizeiANDROID for type EGLSetBlobFuncANDROID
DIAG: *** tagging type: EGLsizeiANDROID -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLsizeiANDROID
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLGetBlobFuncANDROID
DIAG: *** tagging type: EGLGetBlobFuncANDROID -> required = True
DIAG: *** Generating dependent type EGLsizeiANDROID for type EGLGetBlobFuncANDROID
DIAG: *** tagging type: EGLsizeiANDROID -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLsizeiANDROID
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_create_native_client_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_USAGE_ANDROID -> required = True
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID -> required = True
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID -> required = True
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID -> required = True
DIAG: *** tagging command: eglCreateNativeClientBufferANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientBuffer
DIAG: *** tagging type: EGLClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_framebuffer_target
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_FRAMEBUFFER_TARGET_ANDROID -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_front_buffer_auto_refresh
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_get_frame_timestamps
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_TIMESTAMP_PENDING_ANDROID -> required = True
DIAG: *** tagging enum: EGL_TIMESTAMP_INVALID_ANDROID -> required = True
DIAG: *** tagging enum: EGL_TIMESTAMPS_ANDROID -> required = True
DIAG: *** tagging enum: EGL_COMPOSITE_DEADLINE_ANDROID -> required = True
DIAG: *** tagging enum: EGL_COMPOSITE_INTERVAL_ANDROID -> required = True
DIAG: *** tagging enum: EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID -> required = True
DIAG: *** tagging enum: EGL_REQUESTED_PRESENT_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_RENDERING_COMPLETE_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_COMPOSITION_LATCH_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_FIRST_COMPOSITION_START_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_LAST_COMPOSITION_START_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_DISPLAY_PRESENT_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_DEQUEUE_READY_TIME_ANDROID -> required = True
DIAG: *** tagging enum: EGL_READS_DONE_TIME_ANDROID -> required = True
DIAG: *** tagging command: eglGetCompositorTimingSupportedANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetCompositorTimingANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLnsecsANDROID
DIAG: *** tagging type: EGLnsecsANDROID -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLnsecsANDROID
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetNextFrameIdANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64KHR
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetFrameTimestampSupportedANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetFrameTimestampsANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64KHR
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLnsecsANDROID
DIAG: *** tagging type: EGLnsecsANDROID -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLnsecsANDROID
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_get_native_client_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglGetNativeClientBufferANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientBuffer
DIAG: *** tagging type: EGLClientBuffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type AHardwareBuffer
DIAG: *** tagging type: AHardwareBuffer -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_image_native_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_ANDROID -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_native_fence_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_NATIVE_FENCE_ANDROID -> required = True
DIAG: *** tagging enum: EGL_SYNC_NATIVE_FENCE_FD_ANDROID -> required = True
DIAG: *** tagging enum: EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID -> required = True
DIAG: *** tagging enum: EGL_NO_NATIVE_FENCE_FD_ANDROID -> required = True
DIAG: *** tagging command: eglDupNativeFenceFDANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_presentation_time
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglPresentationTimeANDROID -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLnsecsANDROID
DIAG: *** tagging type: EGLnsecsANDROID -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLnsecsANDROID
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANDROID_recordable
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_RECORDABLE_ANDROID -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANGLE_d3d_share_handle_client_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANGLE_device_d3d
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_D3D9_DEVICE_ANGLE -> required = True
DIAG: *** tagging enum: EGL_D3D11_DEVICE_ANGLE -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANGLE_query_surface_pointer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglQuerySurfacePointerANGLE -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANGLE_surface_d3d_texture_2d_share_handle
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANGLE_sync_control_rate
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglGetMscRateANGLE -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ANGLE_window_fixed_size
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_FIXED_SIZE_ANGLE -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ARM_image_format
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM -> required = True
DIAG: *** tagging enum: EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ARM_implicit_external_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_ARM_pixmap_multisample_discard
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DISCARD_SAMPLES_ARM -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_bind_to_front
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_FRONT_BUFFER_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_buffer_age
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_BUFFER_AGE_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_client_extensions
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_client_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_CLIENT_EXT -> required = True
DIAG: *** tagging enum: EGL_SYNC_CLIENT_SIGNAL_EXT -> required = True
DIAG: *** tagging command: eglClientSignalSyncEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_compositor
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT -> required = True
DIAG: *** tagging enum: EGL_EXTERNAL_REF_ID_EXT -> required = True
DIAG: *** tagging enum: EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT -> required = True
DIAG: *** tagging enum: EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT -> required = True
DIAG: *** tagging command: eglCompositorSetContextListEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCompositorSetContextAttributesEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCompositorSetWindowListEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCompositorSetWindowAttributesEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCompositorBindTexWindowEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCompositorSetSizeEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCompositorSwapPolicyEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_config_select_group
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONFIG_SELECT_GROUP_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_create_context_robustness
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT -> required = True
DIAG: *** tagging enum: EGL_NO_RESET_NOTIFICATION_EXT -> required = True
DIAG: *** tagging enum: EGL_LOSE_CONTEXT_ON_RESET_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_base
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NO_DEVICE_EXT -> required = True
DIAG: *** tagging enum: EGL_BAD_DEVICE_EXT -> required = True
DIAG: *** tagging enum: EGL_DEVICE_EXT -> required = True
DIAG: *** tagging command: eglQueryDeviceAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDeviceStringEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDevicesEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDisplayAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_drm
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DRM_DEVICE_FILE_EXT -> required = True
DIAG: *** tagging enum: EGL_DRM_MASTER_FD_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_drm_render_node
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DRM_RENDER_NODE_FILE_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_enumeration
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglQueryDevicesEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_openwf
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_OPENWF_DEVICE_ID_EXT -> required = True
DIAG: *** tagging enum: EGL_OPENWF_DEVICE_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_persistent_id
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DEVICE_UUID_EXT -> required = True
DIAG: *** tagging enum: EGL_DRIVER_UUID_EXT -> required = True
DIAG: *** tagging enum: EGL_DRIVER_NAME_EXT -> required = True
DIAG: *** tagging command: eglQueryDeviceBinaryEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_query
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NO_DEVICE_EXT -> required = True
DIAG: *** tagging enum: EGL_BAD_DEVICE_EXT -> required = True
DIAG: *** tagging enum: EGL_DEVICE_EXT -> required = True
DIAG: *** tagging command: eglQueryDeviceAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDeviceStringEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDeviceEXT
DIAG: *** tagging type: EGLDeviceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDisplayAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_device_query_name
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_RENDERER_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_explicit_device
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DEVICE_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_bt2020_linear
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_BT2020_LINEAR_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_bt2020_pq
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_BT2020_PQ_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_display_p3
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_DISPLAY_P3_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_display_p3_linear
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_display_p3_passthrough
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_scrgb
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_SCRGB_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_gl_colorspace_scrgb_linear
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_image_dma_buf_import
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_LINUX_DMA_BUF_EXT -> required = True
DIAG: *** tagging enum: EGL_LINUX_DRM_FOURCC_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE0_FD_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE0_OFFSET_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE0_PITCH_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE1_FD_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE1_OFFSET_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE1_PITCH_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE2_FD_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE2_OFFSET_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE2_PITCH_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_COLOR_SPACE_HINT_EXT -> required = True
DIAG: *** tagging enum: EGL_SAMPLE_RANGE_HINT_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT -> required = True
DIAG: *** tagging enum: EGL_ITU_REC601_EXT -> required = True
DIAG: *** tagging enum: EGL_ITU_REC709_EXT -> required = True
DIAG: *** tagging enum: EGL_ITU_REC2020_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_FULL_RANGE_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_NARROW_RANGE_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CHROMA_SITING_0_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CHROMA_SITING_0_5_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_image_dma_buf_import_modifiers
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE3_FD_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE3_OFFSET_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE3_PITCH_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT -> required = True
DIAG: *** tagging enum: EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT -> required = True
DIAG: *** tagging command: eglQueryDmaBufFormatsEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryDmaBufModifiersEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64KHR
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_image_gl_colorspace
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_COLORSPACE -> required = True
DIAG: *** tagging enum: EGL_GL_COLORSPACE_DEFAULT_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_image_implicit_sync_control
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_IMPORT_SYNC_TYPE_EXT -> required = True
DIAG: *** tagging enum: EGL_IMPORT_IMPLICIT_SYNC_EXT -> required = True
DIAG: *** tagging enum: EGL_IMPORT_EXPLICIT_SYNC_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_multiview_window
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_MULTIVIEW_VIEW_COUNT_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_output_base
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging type: EGLOutputLayerEXT -> required = True
DIAG: *** tagging type: EGLOutputPortEXT -> required = True
DIAG: *** tagging enum: EGL_NO_OUTPUT_LAYER_EXT -> required = True
DIAG: *** tagging enum: EGL_NO_OUTPUT_PORT_EXT -> required = True
DIAG: *** tagging enum: EGL_BAD_OUTPUT_LAYER_EXT -> required = True
DIAG: *** tagging enum: EGL_BAD_OUTPUT_PORT_EXT -> required = True
DIAG: *** tagging enum: EGL_SWAP_INTERVAL_EXT -> required = True
DIAG: *** tagging command: eglGetOutputLayersEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputLayerEXT
DIAG: *** tagging type: EGLOutputLayerEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetOutputPortsEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputPortEXT
DIAG: *** tagging type: EGLOutputPortEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglOutputLayerAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputLayerEXT
DIAG: *** tagging type: EGLOutputLayerEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryOutputLayerAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputLayerEXT
DIAG: *** tagging type: EGLOutputLayerEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryOutputLayerStringEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputLayerEXT
DIAG: *** tagging type: EGLOutputLayerEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglOutputPortAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputPortEXT
DIAG: *** tagging type: EGLOutputPortEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryOutputPortAttribEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputPortEXT
DIAG: *** tagging type: EGLOutputPortEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryOutputPortStringEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputPortEXT
DIAG: *** tagging type: EGLOutputPortEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_output_drm
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DRM_CRTC_EXT -> required = True
DIAG: *** tagging enum: EGL_DRM_PLANE_EXT -> required = True
DIAG: *** tagging enum: EGL_DRM_CONNECTOR_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_output_openwf
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_OPENWF_PIPELINE_ID_EXT -> required = True
DIAG: *** tagging enum: EGL_OPENWF_PORT_ID_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_pixel_format_float
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_COLOR_COMPONENT_TYPE_EXT -> required = True
DIAG: *** tagging enum: EGL_COLOR_COMPONENT_TYPE_FIXED_EXT -> required = True
DIAG: *** tagging enum: EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_platform_base
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglGetPlatformDisplayEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreatePlatformWindowSurfaceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglCreatePlatformPixmapSurfaceEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_platform_device
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_DEVICE_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_platform_wayland
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_WAYLAND_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_platform_x11
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_X11_EXT -> required = True
DIAG: *** tagging enum: EGL_PLATFORM_X11_SCREEN_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_platform_xcb
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_XCB_EXT -> required = True
DIAG: *** tagging enum: EGL_PLATFORM_XCB_SCREEN_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_present_opaque
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PRESENT_OPAQUE_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_protected_content
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PROTECTED_CONTENT_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_protected_surface
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PROTECTED_CONTENT_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_stream_consumer_egloutput
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglStreamConsumerOutputEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLOutputLayerEXT
DIAG: *** tagging type: EGLOutputLayerEXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_surface_CTA861_3_metadata
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT -> required = True
DIAG: *** tagging enum: EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_surface_SMPTE2086_metadata
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_WHITE_POINT_X_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_WHITE_POINT_Y_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_MAX_LUMINANCE_EXT -> required = True
DIAG: *** tagging enum: EGL_SMPTE2086_MIN_LUMINANCE_EXT -> required = True
DIAG: *** tagging enum: EGL_METADATA_SCALING_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_surface_compression
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_PLANE1_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_PLANE2_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT -> required = True
DIAG: *** tagging enum: EGL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT -> required = True
DIAG: *** tagging command: eglQuerySupportedCompressionRatesEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_swap_buffers_with_damage
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglSwapBuffersWithDamageEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_sync_reuse
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglUnsignalSyncEXT -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_EXT_yuv_surface
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_YUV_ORDER_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_NUMBER_OF_PLANES_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_SUBSAMPLE_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_DEPTH_RANGE_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CSC_STANDARD_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_PLANE_BPP_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_BUFFER_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_YUV_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_YVU_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_YUYV_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_UYVY_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_YVYU_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_VYUY_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_ORDER_AYUV_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_SUBSAMPLE_4_2_0_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_SUBSAMPLE_4_2_2_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_SUBSAMPLE_4_4_4_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_DEPTH_RANGE_LIMITED_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_DEPTH_RANGE_FULL_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CSC_STANDARD_601_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CSC_STANDARD_709_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_CSC_STANDARD_2020_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_PLANE_BPP_0_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_PLANE_BPP_8_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_PLANE_BPP_10_EXT -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_HI_clientpixmap
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CLIENT_PIXMAP_POINTER_HI -> required = True
DIAG: *** tagging command: eglCreatePixmapSurfaceHI -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLConfig
DIAG: *** tagging type: EGLConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLClientPixmapHI
DIAG: *** tagging type: EGLClientPixmapHI -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_HI_colorformats
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_COLOR_FORMAT_HI -> required = True
DIAG: *** tagging enum: EGL_COLOR_RGB_HI -> required = True
DIAG: *** tagging enum: EGL_COLOR_RGBA_HI -> required = True
DIAG: *** tagging enum: EGL_COLOR_ARGB_HI -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_IMG_context_priority
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_PRIORITY_LEVEL_IMG -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_PRIORITY_HIGH_IMG -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_PRIORITY_MEDIUM_IMG -> required = True
DIAG: *** tagging enum: EGL_CONTEXT_PRIORITY_LOW_IMG -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_IMG_image_plane_attribs
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG -> required = True
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_MESA_drm_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DRM_BUFFER_FORMAT_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_USE_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_FORMAT_ARGB32_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_STRIDE_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_USE_SCANOUT_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_USE_SHARE_MESA -> required = True
DIAG: *** tagging enum: EGL_DRM_BUFFER_USE_CURSOR_MESA -> required = True
DIAG: *** tagging command: eglCreateDRMImageMESA -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglExportDRMImageMESA -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_MESA_gl_texture_cubemap_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GL_TEXTURE_CUBE_MAP_MESA -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_MESA_image_dma_buf_export
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglExportDMABUFImageQueryMESA -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64KHR
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglExportDMABUFImageMESA -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_MESA_platform_gbm
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_GBM_MESA -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_MESA_platform_surfaceless
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PLATFORM_SURFACELESS_MESA -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_MESA_query_driver
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglGetDisplayDriverConfig -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** tagging command: eglGetDisplayDriverName -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NOK_swap_region
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglSwapBuffersRegionNOK -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NOK_swap_region2
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglSwapBuffersRegion2NOK -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NOK_texture_from_pixmap
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_Y_INVERTED_NOK -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_3dvision_surface
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_AUTO_STEREO_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_context_priority_realtime
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CONTEXT_PRIORITY_REALTIME_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_coverage_sample
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_COVERAGE_BUFFERS_NV -> required = True
DIAG: *** tagging enum: EGL_COVERAGE_SAMPLES_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_coverage_sample_resolve
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_COVERAGE_SAMPLE_RESOLVE_NV -> required = True
DIAG: *** tagging enum: EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV -> required = True
DIAG: *** tagging enum: EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_cuda_event
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CUDA_EVENT_HANDLE_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_CUDA_EVENT_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_CUDA_EVENT_COMPLETE_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_depth_nonlinear
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_DEPTH_ENCODING_NV -> required = True
DIAG: *** tagging enum: EGL_DEPTH_ENCODING_NONE_NV -> required = True
DIAG: *** tagging enum: EGL_DEPTH_ENCODING_NONLINEAR_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_device_cuda
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_CUDA_DEVICE_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_native_query
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglQueryNativeDisplayNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativeDisplayType
DIAG: *** tagging type: EGLNativeDisplayType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativeDisplayType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryNativeWindowNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativeWindowType
DIAG: *** tagging type: EGLNativeWindowType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativeWindowType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryNativePixmapNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLNativePixmapType
DIAG: *** tagging type: EGLNativePixmapType -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLNativePixmapType
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_post_convert_rounding
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_post_sub_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_POST_SUB_BUFFER_SUPPORTED_NV -> required = True
DIAG: *** tagging command: eglPostSubBufferNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSurface
DIAG: *** tagging type: EGLSurface -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_quadruple_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_QUADRUPLE_BUFFER_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_robustness_video_memory_purge
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_consumer_eglimage
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_CONSUMER_IMAGE_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_IMAGE_ADD_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_IMAGE_REMOVE_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_IMAGE_AVAILABLE_NV -> required = True
DIAG: *** tagging command: eglStreamImageConsumerConnectNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64KHR
DIAG: *** tagging type: EGLuint64KHR -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64KHR
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryStreamConsumerEventNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLTime
DIAG: *** tagging type: EGLTime -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLTime
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglStreamAcquireImageNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImage
DIAG: *** tagging type: EGLImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** tagging command: eglStreamReleaseImageNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImage
DIAG: *** tagging type: EGLImage -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSync
DIAG: *** tagging type: EGLSync -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_consumer_gltexture_yuv
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_YUV_PLANE0_TEXTURE_UNIT_NV -> required = True
DIAG: *** tagging enum: EGL_YUV_PLANE1_TEXTURE_UNIT_NV -> required = True
DIAG: *** tagging enum: EGL_YUV_PLANE2_TEXTURE_UNIT_NV -> required = True
DIAG: *** tagging enum: EGL_YUV_NUMBER_OF_PLANES_EXT -> required = True
DIAG: *** tagging enum: EGL_YUV_BUFFER_EXT -> required = True
DIAG: *** tagging command: eglStreamConsumerGLTextureExternalAttribsNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_cross_display
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_CROSS_DISPLAY_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_cross_object
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_CROSS_OBJECT_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_cross_partition
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_CROSS_PARTITION_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_cross_process
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_CROSS_PROCESS_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_cross_system
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_CROSS_SYSTEM_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_dma
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_DMA_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_DMA_SERVER_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_fifo_next
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PENDING_FRAME_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_TIME_PENDING_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_fifo_synchronous
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_FIFO_SYNCHRONOUS_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_flush
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglStreamFlushNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_frame_limits
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_PRODUCER_MAX_FRAME_HINT_NV -> required = True
DIAG: *** tagging enum: EGL_CONSUMER_MAX_FRAME_HINT_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_metadata
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_MAX_STREAM_METADATA_BLOCKS_NV -> required = True
DIAG: *** tagging enum: EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV -> required = True
DIAG: *** tagging enum: EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV -> required = True
DIAG: *** tagging enum: EGL_PRODUCER_METADATA_NV -> required = True
DIAG: *** tagging enum: EGL_CONSUMER_METADATA_NV -> required = True
DIAG: *** tagging enum: EGL_PENDING_METADATA_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA0_SIZE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA1_SIZE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA2_SIZE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA3_SIZE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA0_TYPE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA1_TYPE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA2_TYPE_NV -> required = True
DIAG: *** tagging enum: EGL_METADATA3_TYPE_NV -> required = True
DIAG: *** tagging command: eglQueryDisplayAttribNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLAttrib
DIAG: *** tagging type: EGLAttrib -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLAttrib
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSetStreamMetadataNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglQueryStreamMetadataNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_origin
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_FRAME_ORIGIN_X_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_FRAME_ORIGIN_Y_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_FRAME_MAJOR_AXIS_NV -> required = True
DIAG: *** tagging enum: EGL_CONSUMER_AUTO_ORIENTATION_NV -> required = True
DIAG: *** tagging enum: EGL_PRODUCER_AUTO_ORIENTATION_NV -> required = True
DIAG: *** tagging enum: EGL_LEFT_NV -> required = True
DIAG: *** tagging enum: EGL_RIGHT_NV -> required = True
DIAG: *** tagging enum: EGL_TOP_NV -> required = True
DIAG: *** tagging enum: EGL_BOTTOM_NV -> required = True
DIAG: *** tagging enum: EGL_X_AXIS_NV -> required = True
DIAG: *** tagging enum: EGL_Y_AXIS_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_remote
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_STATE_INITIALIZING_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_TYPE_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_PROTOCOL_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_ENDPOINT_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_LOCAL_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_PRODUCER_NV -> required = True
DIAG: *** tagging enum: EGL_STREAM_CONSUMER_NV -> required = True
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_PROTOCOL_FD_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_reset
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SUPPORT_RESET_NV -> required = True
DIAG: *** tagging enum: EGL_SUPPORT_REUSE_NV -> required = True
DIAG: *** tagging command: eglResetStreamNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_socket
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_STREAM_PROTOCOL_SOCKET_NV -> required = True
DIAG: *** tagging enum: EGL_SOCKET_HANDLE_NV -> required = True
DIAG: *** tagging enum: EGL_SOCKET_TYPE_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_socket_inet
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SOCKET_TYPE_INET_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_socket_unix
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SOCKET_TYPE_UNIX_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_stream_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_TYPE_KHR -> required = True
DIAG: *** tagging enum: EGL_SYNC_NEW_FRAME_NV -> required = True
DIAG: *** tagging command: eglCreateStreamSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncKHR
DIAG: *** tagging type: EGLSyncKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLStreamKHR
DIAG: *** tagging type: EGLStreamKHR -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_sync
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_STATUS_NV -> required = True
DIAG: *** tagging enum: EGL_SIGNALED_NV -> required = True
DIAG: *** tagging enum: EGL_UNSIGNALED_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_FLUSH_COMMANDS_BIT_NV -> required = True
DIAG: *** tagging enum: EGL_FOREVER_NV -> required = True
DIAG: *** tagging enum: EGL_ALREADY_SIGNALED_NV -> required = True
DIAG: *** tagging enum: EGL_TIMEOUT_EXPIRED_NV -> required = True
DIAG: *** tagging enum: EGL_CONDITION_SATISFIED_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_TYPE_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_CONDITION_NV -> required = True
DIAG: *** tagging enum: EGL_SYNC_FENCE_NV -> required = True
DIAG: *** tagging enum: EGL_NO_SYNC_NV -> required = True
DIAG: *** tagging command: eglCreateFenceSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncNV
DIAG: *** tagging type: EGLSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglDestroySyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncNV
DIAG: *** tagging type: EGLSyncNV -> required = True
DIAG: *** tagging command: eglFenceNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncNV
DIAG: *** tagging type: EGLSyncNV -> required = True
DIAG: *** tagging command: eglClientWaitSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncNV
DIAG: *** tagging type: EGLSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLTimeNV
DIAG: *** tagging type: EGLTimeNV -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLTimeNV
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglSignalSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncNV
DIAG: *** tagging type: EGLSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLenum
DIAG: *** tagging type: EGLenum -> required = True
DIAG: *** tagging command: eglGetSyncAttribNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLSyncNV
DIAG: *** tagging type: EGLSyncNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_system_time
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging command: eglGetSystemTimeFrequencyNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64NV
DIAG: *** tagging type: EGLuint64NV -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64NV
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** tagging command: eglGetSystemTimeNV -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLuint64NV
DIAG: *** tagging type: EGLuint64NV -> required = True
DIAG: *** Generating dependent type khrplatform for type EGLuint64NV
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_NV_triple_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_TRIPLE_BUFFER_NV -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_TIZEN_image_native_buffer
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_BUFFER_TIZEN -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_TIZEN_image_native_surface
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging enum: EGL_NATIVE_SURFACE_TIZEN -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_WL_bind_wayland_display
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging type: PFNEGLBINDWAYLANDDISPLAYWL -> required = True
DIAG: *** tagging type: PFNEGLUNBINDWAYLANDDISPLAYWL -> required = True
DIAG: *** tagging type: PFNEGLQUERYWAYLANDBUFFERWL -> required = True
DIAG: *** tagging enum: EGL_WAYLAND_BUFFER_WL -> required = True
DIAG: *** tagging enum: EGL_WAYLAND_PLANE_WL -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_Y_U_V_WL -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_Y_UV_WL -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_Y_XUXV_WL -> required = True
DIAG: *** tagging enum: EGL_TEXTURE_EXTERNAL_WL -> required = True
DIAG: *** tagging enum: EGL_WAYLAND_Y_INVERTED_WL -> required = True
DIAG: *** tagging command: eglBindWaylandDisplayWL -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type wl_display
DIAG: *** tagging type: wl_display -> required = True
DIAG: *** tagging command: eglUnbindWaylandDisplayWL -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type wl_display
DIAG: *** tagging type: wl_display -> required = True
DIAG: *** tagging command: eglQueryWaylandBufferWL -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLBoolean
DIAG: *** tagging type: EGLBoolean -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type wl_resource
DIAG: *** tagging type: wl_resource -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLint
DIAG: *** tagging type: EGLint -> required = True
DIAG: *** Generating dependent type eglplatform for type EGLint
DIAG: *** tagging type: eglplatform -> required = True
DIAG: *** Generating dependent type khrplatform for type eglplatform
DIAG: *** tagging type: khrplatform -> required = True
DIAG: *** PASS 1: Tagging required and removed features for EGL_WL_create_wayland_buffer_from_image
DIAG: *** markRequired (features = <too long to print>, required = True )
DIAG: *** tagging type: PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL -> required = True
DIAG: *** tagging command: eglCreateWaylandBufferFromImageWL -> required = True
DIAG: *** markRequired: command implicitly requires dependent type wl_buffer
DIAG: *** tagging type: wl_buffer -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLDisplay
DIAG: *** tagging type: EGLDisplay -> required = True
DIAG: *** markRequired: command implicitly requires dependent type EGLImageKHR
DIAG: *** tagging type: EGLImageKHR -> required = True
DIAG: *** PASS 2: GENERATE INTERFACES FOR FEATURES ************************
DIAG: *** PASS 2: Generating interface for EGL_VERSION_1_0
DIAG: *** PASS 2: NOT declaring feature EGL_VERSION_1_0 because it is not tagged for emission
DIAG: *** Skipping enum EGL_ALPHA_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_ACCESS (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_ALLOC (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_ATTRIBUTE (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_CONFIG (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_CONTEXT (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_CURRENT_SURFACE (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_DISPLAY (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_MATCH (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_NATIVE_PIXMAP (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_NATIVE_WINDOW (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_PARAMETER (not emitting this feature)
DIAG: *** Skipping enum EGL_BAD_SURFACE (not emitting this feature)
DIAG: *** Skipping enum EGL_BLUE_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_BUFFER_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_CONFIG_CAVEAT (not emitting this feature)
DIAG: *** Skipping enum EGL_CONFIG_ID (not emitting this feature)
DIAG: *** Skipping enum EGL_CORE_NATIVE_ENGINE (not emitting this feature)
DIAG: *** Skipping enum EGL_DEPTH_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_DONT_CARE (not emitting this feature)
DIAG: *** Skipping enum EGL_DRAW (not emitting this feature)
DIAG: *** Skipping enum EGL_EXTENSIONS (not emitting this feature)
DIAG: *** Skipping enum EGL_FALSE (not emitting this feature)
DIAG: *** Skipping enum EGL_GREEN_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_HEIGHT (not emitting this feature)
DIAG: *** Skipping enum EGL_LARGEST_PBUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_LEVEL (not emitting this feature)
DIAG: *** Skipping enum EGL_MAX_PBUFFER_HEIGHT (not emitting this feature)
DIAG: *** Skipping enum EGL_MAX_PBUFFER_PIXELS (not emitting this feature)
DIAG: *** Skipping enum EGL_MAX_PBUFFER_WIDTH (not emitting this feature)
DIAG: *** Skipping enum EGL_NATIVE_RENDERABLE (not emitting this feature)
DIAG: *** Skipping enum EGL_NATIVE_VISUAL_ID (not emitting this feature)
DIAG: *** Skipping enum EGL_NATIVE_VISUAL_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_NONE (not emitting this feature)
DIAG: *** Skipping enum EGL_NON_CONFORMANT_CONFIG (not emitting this feature)
DIAG: *** Skipping enum EGL_NOT_INITIALIZED (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_CONTEXT (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_DISPLAY (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_SURFACE (not emitting this feature)
DIAG: *** Skipping enum EGL_PBUFFER_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_PIXMAP_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_READ (not emitting this feature)
DIAG: *** Skipping enum EGL_RED_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_SAMPLES (not emitting this feature)
DIAG: *** Skipping enum EGL_SAMPLE_BUFFERS (not emitting this feature)
DIAG: *** Skipping enum EGL_SLOW_CONFIG (not emitting this feature)
DIAG: *** Skipping enum EGL_STENCIL_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_SUCCESS (not emitting this feature)
DIAG: *** Skipping enum EGL_SURFACE_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_TRANSPARENT_BLUE_VALUE (not emitting this feature)
DIAG: *** Skipping enum EGL_TRANSPARENT_GREEN_VALUE (not emitting this feature)
DIAG: *** Skipping enum EGL_TRANSPARENT_RED_VALUE (not emitting this feature)
DIAG: *** Skipping enum EGL_TRANSPARENT_RGB (not emitting this feature)
DIAG: *** Skipping enum EGL_TRANSPARENT_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_TRUE (not emitting this feature)
DIAG: *** Skipping enum EGL_VENDOR (not emitting this feature)
DIAG: *** Skipping enum EGL_VERSION (not emitting this feature)
DIAG: *** Skipping enum EGL_WIDTH (not emitting this feature)
DIAG: *** Skipping enum EGL_WINDOW_BIT (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (not emitting this feature)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Generating required dependent type eglplatform
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (not emitting this feature)
DIAG: *** Skipping type eglplatform (not emitting this feature)
DIAG: *** Skipping type EGLint (not emitting this feature)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (not emitting this feature)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglChooseConfig (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLNativePixmapType
DIAG: *** Generating required dependent type eglplatform
DIAG: *** Skipping type eglplatform (already declared)
DIAG: *** Skipping type EGLNativePixmapType (not emitting this feature)
DIAG: *** Skipping command eglCopyBuffers (not emitting this feature)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglCreateContext (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglCreatePbufferSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLNativePixmapType
DIAG: *** Skipping type EGLNativePixmapType (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglCreatePixmapSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLNativeWindowType
DIAG: *** Generating required dependent type eglplatform
DIAG: *** Skipping type eglplatform (already declared)
DIAG: *** Skipping type EGLNativeWindowType (not emitting this feature)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglCreateWindowSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Skipping command eglDestroyContext (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Skipping command eglDestroySurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglGetConfigAttrib (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglGetConfigs (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Skipping command eglGetCurrentDisplay (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglGetCurrentSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLNativeDisplayType
DIAG: *** Generating required dependent type eglplatform
DIAG: *** Skipping type eglplatform (already declared)
DIAG: *** Skipping type EGLNativeDisplayType (not emitting this feature)
DIAG: *** Skipping command eglGetDisplay (not emitting this feature)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglGetError (not emitting this feature)
DIAG: *** Generating required parameter type __eglMustCastToProperFunctionPointerType
DIAG: *** Skipping type __eglMustCastToProperFunctionPointerType (not emitting this feature)
DIAG: *** Skipping command eglGetProcAddress (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglInitialize (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Skipping command eglMakeCurrent (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglQueryContext (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglQueryString (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglQuerySurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Skipping command eglSwapBuffers (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Skipping command eglTerminate (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Skipping command eglWaitGL (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglWaitNative (not emitting this feature)
DIAG: *** PASS 2: Generating interface for EGL_VERSION_1_1
DIAG: *** PASS 2: NOT declaring feature EGL_VERSION_1_1 because it is not tagged for emission
DIAG: *** Skipping enum EGL_BACK_BUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_BIND_TO_TEXTURE_RGB (not emitting this feature)
DIAG: *** Skipping enum EGL_BIND_TO_TEXTURE_RGBA (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_LOST (not emitting this feature)
DIAG: *** Skipping enum EGL_MIN_SWAP_INTERVAL (not emitting this feature)
DIAG: *** Skipping enum EGL_MAX_SWAP_INTERVAL (not emitting this feature)
DIAG: *** Skipping enum EGL_MIPMAP_TEXTURE (not emitting this feature)
DIAG: *** Skipping enum EGL_MIPMAP_LEVEL (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_TEXTURE (not emitting this feature)
DIAG: *** Skipping enum EGL_TEXTURE_2D (not emitting this feature)
DIAG: *** Skipping enum EGL_TEXTURE_FORMAT (not emitting this feature)
DIAG: *** Skipping enum EGL_TEXTURE_RGB (not emitting this feature)
DIAG: *** Skipping enum EGL_TEXTURE_RGBA (not emitting this feature)
DIAG: *** Skipping enum EGL_TEXTURE_TARGET (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglBindTexImage (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglReleaseTexImage (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglSurfaceAttrib (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglSwapInterval (not emitting this feature)
DIAG: *** PASS 2: Generating interface for EGL_VERSION_1_2
DIAG: *** PASS 2: NOT declaring feature EGL_VERSION_1_2 because it is not tagged for emission
DIAG: *** Skipping enum EGL_ALPHA_FORMAT (not emitting this feature)
DIAG: *** Skipping enum EGL_ALPHA_FORMAT_NONPRE (not emitting this feature)
DIAG: *** Skipping enum EGL_ALPHA_FORMAT_PRE (not emitting this feature)
DIAG: *** Skipping enum EGL_ALPHA_MASK_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_BUFFER_PRESERVED (not emitting this feature)
DIAG: *** Skipping enum EGL_BUFFER_DESTROYED (not emitting this feature)
DIAG: *** Skipping enum EGL_CLIENT_APIS (not emitting this feature)
DIAG: *** Skipping enum EGL_COLORSPACE (not emitting this feature)
DIAG: *** Skipping enum EGL_COLORSPACE_sRGB (not emitting this feature)
DIAG: *** Skipping enum EGL_COLORSPACE_LINEAR (not emitting this feature)
DIAG: *** Skipping enum EGL_COLOR_BUFFER_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_CLIENT_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_DISPLAY_SCALING (not emitting this feature)
DIAG: *** Skipping enum EGL_HORIZONTAL_RESOLUTION (not emitting this feature)
DIAG: *** Skipping enum EGL_LUMINANCE_BUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_LUMINANCE_SIZE (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENGL_ES_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENVG_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENGL_ES_API (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENVG_API (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENVG_IMAGE (not emitting this feature)
DIAG: *** Skipping enum EGL_PIXEL_ASPECT_RATIO (not emitting this feature)
DIAG: *** Skipping enum EGL_RENDERABLE_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_RENDER_BUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_RGB_BUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_SINGLE_BUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_SWAP_BEHAVIOR (not emitting this feature)
DIAG: *** Skipping enum EGL_UNKNOWN (not emitting this feature)
DIAG: *** Skipping enum EGL_VERTICAL_RESOLUTION (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (not emitting this feature)
DIAG: *** Skipping command eglBindAPI (not emitting this feature)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Skipping command eglQueryAPI (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLClientBuffer
DIAG: *** Skipping type EGLClientBuffer (not emitting this feature)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglCreatePbufferFromClientBuffer (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Skipping command eglReleaseThread (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Skipping command eglWaitClient (not emitting this feature)
DIAG: *** PASS 2: Generating interface for EGL_VERSION_1_3
DIAG: *** PASS 2: NOT declaring feature EGL_VERSION_1_3 because it is not tagged for emission
DIAG: *** Skipping enum EGL_CONFORMANT (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_CLIENT_VERSION (not emitting this feature)
DIAG: *** Skipping enum EGL_MATCH_NATIVE_PIXMAP (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENGL_ES2_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_ALPHA_FORMAT (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_ALPHA_FORMAT_NONPRE (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_ALPHA_FORMAT_PRE (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_ALPHA_FORMAT_PRE_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_COLORSPACE (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_COLORSPACE_sRGB (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_COLORSPACE_LINEAR (not emitting this feature)
DIAG: *** Skipping enum EGL_VG_COLORSPACE_LINEAR_BIT (not emitting this feature)
DIAG: *** PASS 2: Generating interface for EGL_VERSION_1_4
DIAG: *** PASS 2: NOT declaring feature EGL_VERSION_1_4 because it is not tagged for emission
DIAG: *** Skipping enum EGL_DEFAULT_DISPLAY (not emitting this feature)
DIAG: *** Skipping enum EGL_MULTISAMPLE_RESOLVE_BOX_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_MULTISAMPLE_RESOLVE (not emitting this feature)
DIAG: *** Skipping enum EGL_MULTISAMPLE_RESOLVE_DEFAULT (not emitting this feature)
DIAG: *** Skipping enum EGL_MULTISAMPLE_RESOLVE_BOX (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENGL_API (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENGL_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_SWAP_BEHAVIOR_PRESERVED_BIT (not emitting this feature)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Skipping command eglGetCurrentContext (not emitting this feature)
DIAG: *** PASS 2: Generating interface for EGL_VERSION_1_5
DIAG: *** PASS 2: NOT declaring feature EGL_VERSION_1_5 because it is not tagged for emission
DIAG: *** Skipping enum EGL_CONTEXT_MAJOR_VERSION (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_MINOR_VERSION (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_PROFILE_MASK (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_RESET_NOTIFICATION (not emitting this feature)
DIAG: *** Skipping enum EGL_LOSE_CONTEXT_ON_RESET (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_DEBUG (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_ROBUST_ACCESS (not emitting this feature)
DIAG: *** Skipping enum EGL_OPENGL_ES3_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_ROBUST_ACCESS (already declared)
DIAG: *** Skipping enum EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY (already declared)
DIAG: *** Skipping enum EGL_CL_EVENT_HANDLE (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_CL_EVENT (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_CL_EVENT_COMPLETE (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_PRIOR_COMMANDS_COMPLETE (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_TYPE (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_STATUS (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_CONDITION (not emitting this feature)
DIAG: *** Skipping enum EGL_SIGNALED (not emitting this feature)
DIAG: *** Skipping enum EGL_UNSIGNALED (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_FLUSH_COMMANDS_BIT (not emitting this feature)
DIAG: *** Skipping enum EGL_FOREVER (not emitting this feature)
DIAG: *** Skipping enum EGL_TIMEOUT_EXPIRED (not emitting this feature)
DIAG: *** Skipping enum EGL_CONDITION_SATISFIED (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_SYNC (not emitting this feature)
DIAG: *** Skipping enum EGL_SYNC_FENCE (not emitting this feature)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Skipping type EGLAttrib (not emitting this feature)
DIAG: *** Skipping command eglCreateSync (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Skipping command eglDestroySync (not emitting this feature)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLTime
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Skipping type EGLTime (not emitting this feature)
DIAG: *** Skipping command eglClientWaitSync (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Skipping command eglGetSyncAttrib (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_COLORSPACE (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_COLORSPACE_SRGB (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_COLORSPACE_LINEAR (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_RENDERBUFFER (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_2D (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_LEVEL (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_3D (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_ZOFFSET (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z (not emitting this feature)
DIAG: *** Skipping enum EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z (not emitting this feature)
DIAG: *** Skipping enum EGL_IMAGE_PRESERVED (not emitting this feature)
DIAG: *** Skipping enum EGL_NO_IMAGE (not emitting this feature)
DIAG: *** Generating required parameter type EGLImage
DIAG: *** Skipping type EGLImage (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLClientBuffer
DIAG: *** Skipping type EGLClientBuffer (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Skipping command eglCreateImage (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLImage
DIAG: *** Skipping type EGLImage (already declared)
DIAG: *** Skipping command eglDestroyImage (not emitting this feature)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Skipping command eglGetPlatformDisplay (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Skipping command eglCreatePlatformWindowSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Skipping command eglCreatePlatformPixmapSurface (not emitting this feature)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Skipping command eglWaitSync (not emitting this feature)
DIAG: *** PASS 2: Generating interface for EGL_KHR_cl_event
DIAG: *** Emitting enum decl for EGL_CL_EVENT_HANDLE_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_CL_EVENT_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_CL_EVENT_COMPLETE_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_cl_event2
DIAG: *** Skipping enum EGL_CL_EVENT_HANDLE_KHR (already declared)
DIAG: *** Skipping enum EGL_SYNC_CL_EVENT_KHR (already declared)
DIAG: *** Skipping enum EGL_SYNC_CL_EVENT_COMPLETE_KHR (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Emitting type decl for EGLSyncKHR
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLAttribKHR
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLAttribKHR
DIAG: *** Emitting command decl for eglCreateSync64KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_client_get_all_proc_addresses
DIAG: *** PASS 2: Generating interface for EGL_KHR_config_attribs
DIAG: *** Emitting enum decl for EGL_CONFORMANT_KHR
DIAG: *** Emitting enum decl for EGL_VG_COLORSPACE_LINEAR_BIT_KHR
DIAG: *** Emitting enum decl for EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_context_flush_control
DIAG: *** Emitting enum decl for EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_RELEASE_BEHAVIOR_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_create_context
DIAG: *** Emitting enum decl for EGL_CONTEXT_MAJOR_VERSION_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_MINOR_VERSION_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_FLAGS_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR
DIAG: *** Emitting enum decl for EGL_NO_RESET_NOTIFICATION_KHR
DIAG: *** Emitting enum decl for EGL_LOSE_CONTEXT_ON_RESET_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR
DIAG: *** Skipping enum EGL_OPENGL_ES3_BIT (already declared)
DIAG: *** Emitting enum decl for EGL_OPENGL_ES3_BIT_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_create_context_no_error
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_NO_ERROR_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_debug
DIAG: *** Emitting type decl for EGLLabelKHR
DIAG: *** Emitting type decl for EGLObjectKHR
DIAG: *** Emitting enum decl for EGL_OBJECT_THREAD_KHR
DIAG: *** Emitting enum decl for EGL_OBJECT_DISPLAY_KHR
DIAG: *** Emitting enum decl for EGL_OBJECT_CONTEXT_KHR
DIAG: *** Emitting enum decl for EGL_OBJECT_SURFACE_KHR
DIAG: *** Emitting enum decl for EGL_OBJECT_IMAGE_KHR
DIAG: *** Emitting enum decl for EGL_OBJECT_SYNC_KHR
DIAG: *** Emitting enum decl for EGL_OBJECT_STREAM_KHR
DIAG: *** Emitting enum decl for EGL_DEBUG_MSG_CRITICAL_KHR
DIAG: *** Emitting enum decl for EGL_DEBUG_MSG_ERROR_KHR
DIAG: *** Emitting enum decl for EGL_DEBUG_MSG_WARN_KHR
DIAG: *** Emitting enum decl for EGL_DEBUG_MSG_INFO_KHR
DIAG: *** Emitting enum decl for EGL_DEBUG_CALLBACK_KHR
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDEBUGPROCKHR
DIAG: *** Emitting type decl for EGLDEBUGPROCKHR
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglDebugMessageControlKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryDebugKHR
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLObjectKHR
DIAG: *** Skipping type EGLObjectKHR (already declared)
DIAG: *** Generating required parameter type EGLLabelKHR
DIAG: *** Skipping type EGLLabelKHR (already declared)
DIAG: *** Emitting command decl for eglLabelObjectKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_display_reference
DIAG: *** Emitting enum decl for EGL_TRACK_REFERENCES_KHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryDisplayAttribKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_fence_sync
DIAG: *** Emitting enum decl for EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_CONDITION_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_FENCE_KHR
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateSyncKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Emitting command decl for eglDestroySyncKHR
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLTimeKHR
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLTimeKHR
DIAG: *** Emitting command decl for eglClientWaitSyncKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetSyncAttribKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_get_all_proc_addresses
DIAG: *** PASS 2: Generating interface for EGL_KHR_gl_colorspace
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_KHR
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_SRGB_KHR
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_LINEAR_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_gl_renderbuffer_image
DIAG: *** Emitting enum decl for EGL_GL_RENDERBUFFER_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_gl_texture_2D_image
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_2D_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_LEVEL_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_gl_texture_3D_image
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_3D_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_ZOFFSET_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_gl_texture_cubemap_image
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_image
DIAG: *** Emitting enum decl for EGL_NATIVE_PIXMAP_KHR
DIAG: *** Emitting enum decl for EGL_NO_IMAGE_KHR
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Emitting type decl for EGLImageKHR
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLContext
DIAG: *** Skipping type EGLContext (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLClientBuffer
DIAG: *** Skipping type EGLClientBuffer (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateImageKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Skipping type EGLImageKHR (already declared)
DIAG: *** Emitting command decl for eglDestroyImageKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_image_base
DIAG: *** Emitting enum decl for EGL_IMAGE_PRESERVED_KHR
DIAG: *** Skipping enum EGL_NO_IMAGE_KHR (already declared)
DIAG: *** Skipping command eglCreateImageKHR (already declared)
DIAG: *** Skipping command eglDestroyImageKHR (already declared)
DIAG: *** PASS 2: Generating interface for EGL_KHR_image_pixmap
DIAG: *** Skipping enum EGL_NATIVE_PIXMAP_KHR (already declared)
DIAG: *** PASS 2: Generating interface for EGL_KHR_lock_surface
DIAG: *** Emitting enum decl for EGL_READ_SURFACE_BIT_KHR
DIAG: *** Emitting enum decl for EGL_WRITE_SURFACE_BIT_KHR
DIAG: *** Emitting enum decl for EGL_LOCK_SURFACE_BIT_KHR
DIAG: *** Emitting enum decl for EGL_OPTIMAL_FORMAT_BIT_KHR
DIAG: *** Emitting enum decl for EGL_MATCH_FORMAT_KHR
DIAG: *** Emitting enum decl for EGL_FORMAT_RGB_565_EXACT_KHR
DIAG: *** Emitting enum decl for EGL_FORMAT_RGB_565_KHR
DIAG: *** Emitting enum decl for EGL_FORMAT_RGBA_8888_EXACT_KHR
DIAG: *** Emitting enum decl for EGL_FORMAT_RGBA_8888_KHR
DIAG: *** Emitting enum decl for EGL_MAP_PRESERVE_PIXELS_KHR
DIAG: *** Emitting enum decl for EGL_LOCK_USAGE_HINT_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_POINTER_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_PITCH_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_ORIGIN_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_PIXEL_RED_OFFSET_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR
DIAG: *** Emitting enum decl for EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR
DIAG: *** Emitting enum decl for EGL_LOWER_LEFT_KHR
DIAG: *** Emitting enum decl for EGL_UPPER_LEFT_KHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglLockSurfaceKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Emitting command decl for eglUnlockSurfaceKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_lock_surface2
DIAG: *** Emitting enum decl for EGL_BITMAP_PIXEL_SIZE_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_lock_surface3
DIAG: *** Skipping enum EGL_READ_SURFACE_BIT_KHR (already declared)
DIAG: *** Skipping enum EGL_WRITE_SURFACE_BIT_KHR (already declared)
DIAG: *** Skipping enum EGL_LOCK_SURFACE_BIT_KHR (already declared)
DIAG: *** Skipping enum EGL_OPTIMAL_FORMAT_BIT_KHR (already declared)
DIAG: *** Skipping enum EGL_MATCH_FORMAT_KHR (already declared)
DIAG: *** Skipping enum EGL_FORMAT_RGB_565_EXACT_KHR (already declared)
DIAG: *** Skipping enum EGL_FORMAT_RGB_565_KHR (already declared)
DIAG: *** Skipping enum EGL_FORMAT_RGBA_8888_EXACT_KHR (already declared)
DIAG: *** Skipping enum EGL_FORMAT_RGBA_8888_KHR (already declared)
DIAG: *** Skipping enum EGL_MAP_PRESERVE_PIXELS_KHR (already declared)
DIAG: *** Skipping enum EGL_LOCK_USAGE_HINT_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PITCH_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_ORIGIN_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PIXEL_RED_OFFSET_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_PIXEL_SIZE_KHR (already declared)
DIAG: *** Skipping enum EGL_BITMAP_POINTER_KHR (already declared)
DIAG: *** Skipping enum EGL_LOWER_LEFT_KHR (already declared)
DIAG: *** Skipping enum EGL_UPPER_LEFT_KHR (already declared)
DIAG: *** Skipping command eglLockSurfaceKHR (already declared)
DIAG: *** Skipping command eglUnlockSurfaceKHR (already declared)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttribKHR
DIAG: *** Skipping type EGLAttribKHR (already declared)
DIAG: *** Emitting command decl for eglQuerySurface64KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_mutable_render_buffer
DIAG: *** Emitting enum decl for EGL_MUTABLE_RENDER_BUFFER_BIT_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_no_config_context
DIAG: *** Emitting enum decl for EGL_NO_CONFIG_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_partial_update
DIAG: *** Emitting enum decl for EGL_BUFFER_AGE_KHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglSetDamageRegionKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_platform_android
DIAG: *** Emitting enum decl for EGL_PLATFORM_ANDROID_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_platform_gbm
DIAG: *** Emitting enum decl for EGL_PLATFORM_GBM_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_platform_wayland
DIAG: *** Emitting enum decl for EGL_PLATFORM_WAYLAND_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_platform_x11
DIAG: *** Emitting enum decl for EGL_PLATFORM_X11_KHR
DIAG: *** Emitting enum decl for EGL_PLATFORM_X11_SCREEN_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_reusable_sync
DIAG: *** Emitting enum decl for EGL_SYNC_STATUS_KHR
DIAG: *** Emitting enum decl for EGL_SIGNALED_KHR
DIAG: *** Emitting enum decl for EGL_UNSIGNALED_KHR
DIAG: *** Emitting enum decl for EGL_TIMEOUT_EXPIRED_KHR
DIAG: *** Emitting enum decl for EGL_CONDITION_SATISFIED_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_TYPE_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_REUSABLE_KHR
DIAG: *** Emitting enum decl for EGL_SYNC_FLUSH_COMMANDS_BIT_KHR
DIAG: *** Emitting enum decl for EGL_FOREVER_KHR
DIAG: *** Emitting enum decl for EGL_NO_SYNC_KHR
DIAG: *** Skipping command eglCreateSyncKHR (already declared)
DIAG: *** Skipping command eglDestroySyncKHR (already declared)
DIAG: *** Skipping command eglClientWaitSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Emitting command decl for eglSignalSyncKHR
DIAG: *** Skipping command eglGetSyncAttribKHR (already declared)
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream
DIAG: *** Emitting enum decl for EGL_NO_STREAM_KHR
DIAG: *** Emitting enum decl for EGL_CONSUMER_LATENCY_USEC_KHR
DIAG: *** Emitting enum decl for EGL_PRODUCER_FRAME_KHR
DIAG: *** Emitting enum decl for EGL_CONSUMER_FRAME_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_CREATED_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_CONNECTING_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_EMPTY_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_DISCONNECTED_KHR
DIAG: *** Emitting enum decl for EGL_BAD_STREAM_KHR
DIAG: *** Emitting enum decl for EGL_BAD_STATE_KHR
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Emitting type decl for EGLStreamKHR
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateStreamKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglDestroyStreamKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglStreamAttribKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryStreamKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLuint64KHR
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLuint64KHR
DIAG: *** Emitting command decl for eglQueryStreamu64KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream_attrib
DIAG: *** Skipping enum EGL_CONSUMER_LATENCY_USEC_KHR (already declared)
DIAG: *** Skipping enum EGL_STREAM_STATE_KHR (already declared)
DIAG: *** Skipping enum EGL_STREAM_STATE_CREATED_KHR (already declared)
DIAG: *** Skipping enum EGL_STREAM_STATE_CONNECTING_KHR (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglCreateStreamAttribKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglSetStreamAttribKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryStreamAttribKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerAcquireAttribKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerReleaseAttribKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream_consumer_gltexture
DIAG: *** Emitting enum decl for EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerGLTextureExternalKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerAcquireKHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerReleaseKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream_cross_process_fd
DIAG: *** Emitting enum decl for EGL_NO_FILE_DESCRIPTOR_KHR
DIAG: *** Generating required parameter type EGLNativeFileDescriptorKHR
DIAG: *** Emitting type decl for EGLNativeFileDescriptorKHR
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglGetStreamFileDescriptorKHR
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLNativeFileDescriptorKHR
DIAG: *** Skipping type EGLNativeFileDescriptorKHR (already declared)
DIAG: *** Emitting command decl for eglCreateStreamFromFileDescriptorKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream_fifo
DIAG: *** Emitting enum decl for EGL_STREAM_FIFO_LENGTH_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_TIME_NOW_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_TIME_CONSUMER_KHR
DIAG: *** Emitting enum decl for EGL_STREAM_TIME_PRODUCER_KHR
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLTimeKHR
DIAG: *** Skipping type EGLTimeKHR (already declared)
DIAG: *** Emitting command decl for eglQueryStreamTimeKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream_producer_aldatalocator
DIAG: *** PASS 2: Generating interface for EGL_KHR_stream_producer_eglsurface
DIAG: *** Emitting enum decl for EGL_STREAM_BIT_KHR
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateStreamProducerSurfaceKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_surfaceless_context
DIAG: *** PASS 2: Generating interface for EGL_KHR_swap_buffers_with_damage
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglSwapBuffersWithDamageKHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_vg_parent_image
DIAG: *** Emitting enum decl for EGL_VG_PARENT_IMAGE_KHR
DIAG: *** PASS 2: Generating interface for EGL_KHR_wait_sync
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglWaitSyncKHR
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_GLES_layers
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_blob_cache
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSetBlobFuncANDROID
DIAG: *** Generating required dependent type EGLsizeiANDROID
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLsizeiANDROID
DIAG: *** Emitting type decl for EGLSetBlobFuncANDROID
DIAG: *** Generating required parameter type EGLGetBlobFuncANDROID
DIAG: *** Generating required dependent type EGLsizeiANDROID
DIAG: *** Skipping type EGLsizeiANDROID (already declared)
DIAG: *** Emitting type decl for EGLGetBlobFuncANDROID
DIAG: *** Emitting command decl for eglSetBlobCacheFuncsANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_create_native_client_buffer
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_USAGE_ANDROID
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID
DIAG: *** Generating required parameter type EGLClientBuffer
DIAG: *** Skipping type EGLClientBuffer (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateNativeClientBufferANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_framebuffer_target
DIAG: *** Emitting enum decl for EGL_FRAMEBUFFER_TARGET_ANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_front_buffer_auto_refresh
DIAG: *** Emitting enum decl for EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_get_frame_timestamps
DIAG: *** Emitting enum decl for EGL_TIMESTAMP_PENDING_ANDROID
DIAG: *** Emitting enum decl for EGL_TIMESTAMP_INVALID_ANDROID
DIAG: *** Emitting enum decl for EGL_TIMESTAMPS_ANDROID
DIAG: *** Emitting enum decl for EGL_COMPOSITE_DEADLINE_ANDROID
DIAG: *** Emitting enum decl for EGL_COMPOSITE_INTERVAL_ANDROID
DIAG: *** Emitting enum decl for EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID
DIAG: *** Emitting enum decl for EGL_REQUESTED_PRESENT_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_RENDERING_COMPLETE_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_COMPOSITION_LATCH_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_FIRST_COMPOSITION_START_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_LAST_COMPOSITION_START_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_DISPLAY_PRESENT_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_DEQUEUE_READY_TIME_ANDROID
DIAG: *** Emitting enum decl for EGL_READS_DONE_TIME_ANDROID
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetCompositorTimingSupportedANDROID
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLnsecsANDROID
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLnsecsANDROID
DIAG: *** Emitting command decl for eglGetCompositorTimingANDROID
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLuint64KHR
DIAG: *** Skipping type EGLuint64KHR (already declared)
DIAG: *** Emitting command decl for eglGetNextFrameIdANDROID
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetFrameTimestampSupportedANDROID
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLuint64KHR
DIAG: *** Skipping type EGLuint64KHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLnsecsANDROID
DIAG: *** Skipping type EGLnsecsANDROID (already declared)
DIAG: *** Emitting command decl for eglGetFrameTimestampsANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_get_native_client_buffer
DIAG: *** Generating required parameter type EGLClientBuffer
DIAG: *** Skipping type EGLClientBuffer (already declared)
DIAG: *** Generating required parameter type AHardwareBuffer
DIAG: *** Emitting type decl for AHardwareBuffer
DIAG: *** Emitting command decl for eglGetNativeClientBufferANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_image_native_buffer
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_ANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_native_fence_sync
DIAG: *** Emitting enum decl for EGL_SYNC_NATIVE_FENCE_ANDROID
DIAG: *** Emitting enum decl for EGL_SYNC_NATIVE_FENCE_FD_ANDROID
DIAG: *** Emitting enum decl for EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID
DIAG: *** Emitting enum decl for EGL_NO_NATIVE_FENCE_FD_ANDROID
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Emitting command decl for eglDupNativeFenceFDANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_presentation_time
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLnsecsANDROID
DIAG: *** Skipping type EGLnsecsANDROID (already declared)
DIAG: *** Emitting command decl for eglPresentationTimeANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANDROID_recordable
DIAG: *** Emitting enum decl for EGL_RECORDABLE_ANDROID
DIAG: *** PASS 2: Generating interface for EGL_ANGLE_d3d_share_handle_client_buffer
DIAG: *** Emitting enum decl for EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE
DIAG: *** PASS 2: Generating interface for EGL_ANGLE_device_d3d
DIAG: *** Emitting enum decl for EGL_D3D9_DEVICE_ANGLE
DIAG: *** Emitting enum decl for EGL_D3D11_DEVICE_ANGLE
DIAG: *** PASS 2: Generating interface for EGL_ANGLE_query_surface_pointer
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQuerySurfacePointerANGLE
DIAG: *** PASS 2: Generating interface for EGL_ANGLE_surface_d3d_texture_2d_share_handle
DIAG: *** Skipping enum EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE (already declared)
DIAG: *** PASS 2: Generating interface for EGL_ANGLE_sync_control_rate
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetMscRateANGLE
DIAG: *** PASS 2: Generating interface for EGL_ANGLE_window_fixed_size
DIAG: *** Emitting enum decl for EGL_FIXED_SIZE_ANGLE
DIAG: *** PASS 2: Generating interface for EGL_ARM_image_format
DIAG: *** Emitting enum decl for EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM
DIAG: *** Emitting enum decl for EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM
DIAG: *** PASS 2: Generating interface for EGL_ARM_implicit_external_sync
DIAG: *** Emitting enum decl for EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM
DIAG: *** PASS 2: Generating interface for EGL_ARM_pixmap_multisample_discard
DIAG: *** Emitting enum decl for EGL_DISCARD_SAMPLES_ARM
DIAG: *** PASS 2: Generating interface for EGL_EXT_bind_to_front
DIAG: *** Emitting enum decl for EGL_FRONT_BUFFER_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_buffer_age
DIAG: *** Emitting enum decl for EGL_BUFFER_AGE_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_client_extensions
DIAG: *** PASS 2: Generating interface for EGL_EXT_client_sync
DIAG: *** Emitting enum decl for EGL_SYNC_CLIENT_EXT
DIAG: *** Emitting enum decl for EGL_SYNC_CLIENT_SIGNAL_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglClientSignalSyncEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_compositor
DIAG: *** Emitting enum decl for EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT
DIAG: *** Emitting enum decl for EGL_EXTERNAL_REF_ID_EXT
DIAG: *** Emitting enum decl for EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT
DIAG: *** Emitting enum decl for EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorSetContextListEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorSetContextAttributesEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorSetWindowListEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorSetWindowAttributesEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorBindTexWindowEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorSetSizeEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCompositorSwapPolicyEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_config_select_group
DIAG: *** Emitting enum decl for EGL_CONFIG_SELECT_GROUP_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_create_context_robustness
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT
DIAG: *** Emitting enum decl for EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT
DIAG: *** Emitting enum decl for EGL_NO_RESET_NOTIFICATION_EXT
DIAG: *** Emitting enum decl for EGL_LOSE_CONTEXT_ON_RESET_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_base
DIAG: *** Emitting enum decl for EGL_NO_DEVICE_EXT
DIAG: *** Emitting enum decl for EGL_BAD_DEVICE_EXT
DIAG: *** Emitting enum decl for EGL_DEVICE_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDeviceEXT
DIAG: *** Emitting type decl for EGLDeviceEXT
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryDeviceAttribEXT
DIAG: *** Generating required parameter type EGLDeviceEXT
DIAG: *** Skipping type EGLDeviceEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryDeviceStringEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDeviceEXT
DIAG: *** Skipping type EGLDeviceEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryDevicesEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryDisplayAttribEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_drm
DIAG: *** Emitting enum decl for EGL_DRM_DEVICE_FILE_EXT
DIAG: *** Emitting enum decl for EGL_DRM_MASTER_FD_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_drm_render_node
DIAG: *** Emitting enum decl for EGL_DRM_RENDER_NODE_FILE_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_enumeration
DIAG: *** Skipping command eglQueryDevicesEXT (already declared)
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_openwf
DIAG: *** Emitting enum decl for EGL_OPENWF_DEVICE_ID_EXT
DIAG: *** Emitting enum decl for EGL_OPENWF_DEVICE_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_persistent_id
DIAG: *** Emitting enum decl for EGL_DEVICE_UUID_EXT
DIAG: *** Emitting enum decl for EGL_DRIVER_UUID_EXT
DIAG: *** Emitting enum decl for EGL_DRIVER_NAME_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDeviceEXT
DIAG: *** Skipping type EGLDeviceEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryDeviceBinaryEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_query
DIAG: *** Skipping enum EGL_NO_DEVICE_EXT (already declared)
DIAG: *** Skipping enum EGL_BAD_DEVICE_EXT (already declared)
DIAG: *** Skipping enum EGL_DEVICE_EXT (already declared)
DIAG: *** Skipping command eglQueryDeviceAttribEXT (already declared)
DIAG: *** Skipping command eglQueryDeviceStringEXT (already declared)
DIAG: *** Skipping command eglQueryDisplayAttribEXT (already declared)
DIAG: *** PASS 2: Generating interface for EGL_EXT_device_query_name
DIAG: *** Emitting enum decl for EGL_RENDERER_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_explicit_device
DIAG: *** Skipping enum EGL_DEVICE_EXT (already declared)
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_bt2020_linear
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_BT2020_LINEAR_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_bt2020_pq
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_BT2020_PQ_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_display_p3
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_DISPLAY_P3_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_display_p3_linear
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_display_p3_passthrough
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_scrgb
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_SCRGB_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_gl_colorspace_scrgb_linear
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_image_dma_buf_import
DIAG: *** Emitting enum decl for EGL_LINUX_DMA_BUF_EXT
DIAG: *** Emitting enum decl for EGL_LINUX_DRM_FOURCC_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE0_FD_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE0_OFFSET_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE0_PITCH_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE1_FD_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE1_OFFSET_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE1_PITCH_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE2_FD_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE2_OFFSET_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE2_PITCH_EXT
DIAG: *** Emitting enum decl for EGL_YUV_COLOR_SPACE_HINT_EXT
DIAG: *** Emitting enum decl for EGL_SAMPLE_RANGE_HINT_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT
DIAG: *** Emitting enum decl for EGL_ITU_REC601_EXT
DIAG: *** Emitting enum decl for EGL_ITU_REC709_EXT
DIAG: *** Emitting enum decl for EGL_ITU_REC2020_EXT
DIAG: *** Emitting enum decl for EGL_YUV_FULL_RANGE_EXT
DIAG: *** Emitting enum decl for EGL_YUV_NARROW_RANGE_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CHROMA_SITING_0_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CHROMA_SITING_0_5_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_image_dma_buf_import_modifiers
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE3_FD_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE3_OFFSET_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE3_PITCH_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT
DIAG: *** Emitting enum decl for EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryDmaBufFormatsEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLuint64KHR
DIAG: *** Skipping type EGLuint64KHR (already declared)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryDmaBufModifiersEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_image_gl_colorspace
DIAG: *** Skipping enum EGL_GL_COLORSPACE (already declared)
DIAG: *** Emitting enum decl for EGL_GL_COLORSPACE_DEFAULT_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_image_implicit_sync_control
DIAG: *** Emitting enum decl for EGL_IMPORT_SYNC_TYPE_EXT
DIAG: *** Emitting enum decl for EGL_IMPORT_IMPLICIT_SYNC_EXT
DIAG: *** Emitting enum decl for EGL_IMPORT_EXPLICIT_SYNC_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_multiview_window
DIAG: *** Emitting enum decl for EGL_MULTIVIEW_VIEW_COUNT_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_output_base
DIAG: *** Emitting type decl for EGLOutputLayerEXT
DIAG: *** Emitting type decl for EGLOutputPortEXT
DIAG: *** Emitting enum decl for EGL_NO_OUTPUT_LAYER_EXT
DIAG: *** Emitting enum decl for EGL_NO_OUTPUT_PORT_EXT
DIAG: *** Emitting enum decl for EGL_BAD_OUTPUT_LAYER_EXT
DIAG: *** Emitting enum decl for EGL_BAD_OUTPUT_PORT_EXT
DIAG: *** Emitting enum decl for EGL_SWAP_INTERVAL_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Generating required parameter type EGLOutputLayerEXT
DIAG: *** Skipping type EGLOutputLayerEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetOutputLayersEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Generating required parameter type EGLOutputPortEXT
DIAG: *** Skipping type EGLOutputPortEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetOutputPortsEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLOutputLayerEXT
DIAG: *** Skipping type EGLOutputLayerEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglOutputLayerAttribEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLOutputLayerEXT
DIAG: *** Skipping type EGLOutputLayerEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryOutputLayerAttribEXT
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLOutputLayerEXT
DIAG: *** Skipping type EGLOutputLayerEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryOutputLayerStringEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLOutputPortEXT
DIAG: *** Skipping type EGLOutputPortEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglOutputPortAttribEXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLOutputPortEXT
DIAG: *** Skipping type EGLOutputPortEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryOutputPortAttribEXT
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLOutputPortEXT
DIAG: *** Skipping type EGLOutputPortEXT (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryOutputPortStringEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_output_drm
DIAG: *** Emitting enum decl for EGL_DRM_CRTC_EXT
DIAG: *** Emitting enum decl for EGL_DRM_PLANE_EXT
DIAG: *** Emitting enum decl for EGL_DRM_CONNECTOR_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_output_openwf
DIAG: *** Emitting enum decl for EGL_OPENWF_PIPELINE_ID_EXT
DIAG: *** Emitting enum decl for EGL_OPENWF_PORT_ID_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_pixel_format_float
DIAG: *** Emitting enum decl for EGL_COLOR_COMPONENT_TYPE_EXT
DIAG: *** Emitting enum decl for EGL_COLOR_COMPONENT_TYPE_FIXED_EXT
DIAG: *** Emitting enum decl for EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_platform_base
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetPlatformDisplayEXT
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreatePlatformWindowSurfaceEXT
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreatePlatformPixmapSurfaceEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_platform_device
DIAG: *** Emitting enum decl for EGL_PLATFORM_DEVICE_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_platform_wayland
DIAG: *** Emitting enum decl for EGL_PLATFORM_WAYLAND_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_platform_x11
DIAG: *** Emitting enum decl for EGL_PLATFORM_X11_EXT
DIAG: *** Emitting enum decl for EGL_PLATFORM_X11_SCREEN_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_platform_xcb
DIAG: *** Emitting enum decl for EGL_PLATFORM_XCB_EXT
DIAG: *** Emitting enum decl for EGL_PLATFORM_XCB_SCREEN_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_present_opaque
DIAG: *** Emitting enum decl for EGL_PRESENT_OPAQUE_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_protected_content
DIAG: *** Emitting enum decl for EGL_PROTECTED_CONTENT_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_protected_surface
DIAG: *** Skipping enum EGL_PROTECTED_CONTENT_EXT (already declared)
DIAG: *** PASS 2: Generating interface for EGL_EXT_stream_consumer_egloutput
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLOutputLayerEXT
DIAG: *** Skipping type EGLOutputLayerEXT (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerOutputEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_surface_CTA861_3_metadata
DIAG: *** Emitting enum decl for EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT
DIAG: *** Emitting enum decl for EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_surface_SMPTE2086_metadata
DIAG: *** Emitting enum decl for EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_WHITE_POINT_X_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_WHITE_POINT_Y_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_MAX_LUMINANCE_EXT
DIAG: *** Emitting enum decl for EGL_SMPTE2086_MIN_LUMINANCE_EXT
DIAG: *** Emitting enum decl for EGL_METADATA_SCALING_EXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_surface_compression
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_PLANE1_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_PLANE2_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT
DIAG: *** Emitting enum decl for EGL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQuerySupportedCompressionRatesEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_swap_buffers_with_damage
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglSwapBuffersWithDamageEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_sync_reuse
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglUnsignalSyncEXT
DIAG: *** PASS 2: Generating interface for EGL_EXT_yuv_surface
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_EXT
DIAG: *** Emitting enum decl for EGL_YUV_NUMBER_OF_PLANES_EXT
DIAG: *** Emitting enum decl for EGL_YUV_SUBSAMPLE_EXT
DIAG: *** Emitting enum decl for EGL_YUV_DEPTH_RANGE_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CSC_STANDARD_EXT
DIAG: *** Emitting enum decl for EGL_YUV_PLANE_BPP_EXT
DIAG: *** Emitting enum decl for EGL_YUV_BUFFER_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_YUV_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_YVU_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_YUYV_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_UYVY_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_YVYU_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_VYUY_EXT
DIAG: *** Emitting enum decl for EGL_YUV_ORDER_AYUV_EXT
DIAG: *** Emitting enum decl for EGL_YUV_SUBSAMPLE_4_2_0_EXT
DIAG: *** Emitting enum decl for EGL_YUV_SUBSAMPLE_4_2_2_EXT
DIAG: *** Emitting enum decl for EGL_YUV_SUBSAMPLE_4_4_4_EXT
DIAG: *** Emitting enum decl for EGL_YUV_DEPTH_RANGE_LIMITED_EXT
DIAG: *** Emitting enum decl for EGL_YUV_DEPTH_RANGE_FULL_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CSC_STANDARD_601_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CSC_STANDARD_709_EXT
DIAG: *** Emitting enum decl for EGL_YUV_CSC_STANDARD_2020_EXT
DIAG: *** Emitting enum decl for EGL_YUV_PLANE_BPP_0_EXT
DIAG: *** Emitting enum decl for EGL_YUV_PLANE_BPP_8_EXT
DIAG: *** Emitting enum decl for EGL_YUV_PLANE_BPP_10_EXT
DIAG: *** PASS 2: Generating interface for EGL_HI_clientpixmap
DIAG: *** Emitting enum decl for EGL_CLIENT_PIXMAP_POINTER_HI
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLConfig
DIAG: *** Skipping type EGLConfig (already declared)
DIAG: *** Generating required parameter type EGLClientPixmapHI
DIAG: *** Emitting type decl for EGLClientPixmapHI
DIAG: *** Emitting command decl for eglCreatePixmapSurfaceHI
DIAG: *** PASS 2: Generating interface for EGL_HI_colorformats
DIAG: *** Emitting enum decl for EGL_COLOR_FORMAT_HI
DIAG: *** Emitting enum decl for EGL_COLOR_RGB_HI
DIAG: *** Emitting enum decl for EGL_COLOR_RGBA_HI
DIAG: *** Emitting enum decl for EGL_COLOR_ARGB_HI
DIAG: *** PASS 2: Generating interface for EGL_IMG_context_priority
DIAG: *** Emitting enum decl for EGL_CONTEXT_PRIORITY_LEVEL_IMG
DIAG: *** Emitting enum decl for EGL_CONTEXT_PRIORITY_HIGH_IMG
DIAG: *** Emitting enum decl for EGL_CONTEXT_PRIORITY_MEDIUM_IMG
DIAG: *** Emitting enum decl for EGL_CONTEXT_PRIORITY_LOW_IMG
DIAG: *** PASS 2: Generating interface for EGL_IMG_image_plane_attribs
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG
DIAG: *** PASS 2: Generating interface for EGL_MESA_drm_image
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_FORMAT_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_USE_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_FORMAT_ARGB32_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_STRIDE_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_USE_SCANOUT_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_USE_SHARE_MESA
DIAG: *** Emitting enum decl for EGL_DRM_BUFFER_USE_CURSOR_MESA
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Skipping type EGLImageKHR (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateDRMImageMESA
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Skipping type EGLImageKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglExportDRMImageMESA
DIAG: *** PASS 2: Generating interface for EGL_MESA_gl_texture_cubemap_image
DIAG: *** Emitting enum decl for EGL_GL_TEXTURE_CUBE_MAP_MESA
DIAG: *** PASS 2: Generating interface for EGL_MESA_image_dma_buf_export
DIAG: *** Skipping type EGLuint64KHR (already declared)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Skipping type EGLImageKHR (already declared)
DIAG: *** Generating required parameter type EGLuint64KHR
DIAG: *** Skipping type EGLuint64KHR (already declared)
DIAG: *** Emitting command decl for eglExportDMABUFImageQueryMESA
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Skipping type EGLImageKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglExportDMABUFImageMESA
DIAG: *** PASS 2: Generating interface for EGL_MESA_platform_gbm
DIAG: *** Emitting enum decl for EGL_PLATFORM_GBM_MESA
DIAG: *** PASS 2: Generating interface for EGL_MESA_platform_surfaceless
DIAG: *** Emitting enum decl for EGL_PLATFORM_SURFACELESS_MESA
DIAG: *** PASS 2: Generating interface for EGL_MESA_query_driver
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Emitting command decl for eglGetDisplayDriverConfig
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Emitting command decl for eglGetDisplayDriverName
DIAG: *** PASS 2: Generating interface for EGL_NOK_swap_region
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglSwapBuffersRegionNOK
DIAG: *** PASS 2: Generating interface for EGL_NOK_swap_region2
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglSwapBuffersRegion2NOK
DIAG: *** PASS 2: Generating interface for EGL_NOK_texture_from_pixmap
DIAG: *** Emitting enum decl for EGL_Y_INVERTED_NOK
DIAG: *** PASS 2: Generating interface for EGL_NV_3dvision_surface
DIAG: *** Emitting enum decl for EGL_AUTO_STEREO_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_context_priority_realtime
DIAG: *** Emitting enum decl for EGL_CONTEXT_PRIORITY_REALTIME_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_coverage_sample
DIAG: *** Emitting enum decl for EGL_COVERAGE_BUFFERS_NV
DIAG: *** Emitting enum decl for EGL_COVERAGE_SAMPLES_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_coverage_sample_resolve
DIAG: *** Emitting enum decl for EGL_COVERAGE_SAMPLE_RESOLVE_NV
DIAG: *** Emitting enum decl for EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV
DIAG: *** Emitting enum decl for EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_cuda_event
DIAG: *** Emitting enum decl for EGL_CUDA_EVENT_HANDLE_NV
DIAG: *** Emitting enum decl for EGL_SYNC_CUDA_EVENT_NV
DIAG: *** Emitting enum decl for EGL_SYNC_CUDA_EVENT_COMPLETE_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_depth_nonlinear
DIAG: *** Emitting enum decl for EGL_DEPTH_ENCODING_NV
DIAG: *** Emitting enum decl for EGL_DEPTH_ENCODING_NONE_NV
DIAG: *** Emitting enum decl for EGL_DEPTH_ENCODING_NONLINEAR_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_device_cuda
DIAG: *** Emitting enum decl for EGL_CUDA_DEVICE_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_native_query
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLNativeDisplayType
DIAG: *** Skipping type EGLNativeDisplayType (already declared)
DIAG: *** Emitting command decl for eglQueryNativeDisplayNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLNativeWindowType
DIAG: *** Skipping type EGLNativeWindowType (already declared)
DIAG: *** Emitting command decl for eglQueryNativeWindowNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLNativePixmapType
DIAG: *** Skipping type EGLNativePixmapType (already declared)
DIAG: *** Emitting command decl for eglQueryNativePixmapNV
DIAG: *** PASS 2: Generating interface for EGL_NV_post_convert_rounding
DIAG: *** PASS 2: Generating interface for EGL_NV_post_sub_buffer
DIAG: *** Emitting enum decl for EGL_POST_SUB_BUFFER_SUPPORTED_NV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLSurface
DIAG: *** Skipping type EGLSurface (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglPostSubBufferNV
DIAG: *** PASS 2: Generating interface for EGL_NV_quadruple_buffer
DIAG: *** Emitting enum decl for EGL_QUADRUPLE_BUFFER_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_robustness_video_memory_purge
DIAG: *** Emitting enum decl for EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_consumer_eglimage
DIAG: *** Emitting enum decl for EGL_STREAM_CONSUMER_IMAGE_NV
DIAG: *** Emitting enum decl for EGL_STREAM_IMAGE_ADD_NV
DIAG: *** Emitting enum decl for EGL_STREAM_IMAGE_REMOVE_NV
DIAG: *** Emitting enum decl for EGL_STREAM_IMAGE_AVAILABLE_NV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLuint64KHR
DIAG: *** Skipping type EGLuint64KHR (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglStreamImageConsumerConnectNV
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLTime
DIAG: *** Skipping type EGLTime (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryStreamConsumerEventNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLImage
DIAG: *** Skipping type EGLImage (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Emitting command decl for eglStreamAcquireImageNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLImage
DIAG: *** Skipping type EGLImage (already declared)
DIAG: *** Generating required parameter type EGLSync
DIAG: *** Skipping type EGLSync (already declared)
DIAG: *** Emitting command decl for eglStreamReleaseImageNV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_consumer_gltexture_yuv
DIAG: *** Emitting enum decl for EGL_YUV_PLANE0_TEXTURE_UNIT_NV
DIAG: *** Emitting enum decl for EGL_YUV_PLANE1_TEXTURE_UNIT_NV
DIAG: *** Emitting enum decl for EGL_YUV_PLANE2_TEXTURE_UNIT_NV
DIAG: *** Skipping enum EGL_YUV_NUMBER_OF_PLANES_EXT (already declared)
DIAG: *** Skipping enum EGL_YUV_BUFFER_EXT (already declared)
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglStreamConsumerGLTextureExternalAttribsNV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_cross_display
DIAG: *** Emitting enum decl for EGL_STREAM_CROSS_DISPLAY_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_cross_object
DIAG: *** Emitting enum decl for EGL_STREAM_CROSS_OBJECT_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_cross_partition
DIAG: *** Emitting enum decl for EGL_STREAM_CROSS_PARTITION_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_cross_process
DIAG: *** Emitting enum decl for EGL_STREAM_CROSS_PROCESS_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_cross_system
DIAG: *** Emitting enum decl for EGL_STREAM_CROSS_SYSTEM_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_dma
DIAG: *** Emitting enum decl for EGL_STREAM_DMA_NV
DIAG: *** Emitting enum decl for EGL_STREAM_DMA_SERVER_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_fifo_next
DIAG: *** Emitting enum decl for EGL_PENDING_FRAME_NV
DIAG: *** Emitting enum decl for EGL_STREAM_TIME_PENDING_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_fifo_synchronous
DIAG: *** Emitting enum decl for EGL_STREAM_FIFO_SYNCHRONOUS_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_flush
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglStreamFlushNV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_frame_limits
DIAG: *** Emitting enum decl for EGL_PRODUCER_MAX_FRAME_HINT_NV
DIAG: *** Emitting enum decl for EGL_CONSUMER_MAX_FRAME_HINT_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_metadata
DIAG: *** Emitting enum decl for EGL_MAX_STREAM_METADATA_BLOCKS_NV
DIAG: *** Emitting enum decl for EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV
DIAG: *** Emitting enum decl for EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV
DIAG: *** Emitting enum decl for EGL_PRODUCER_METADATA_NV
DIAG: *** Emitting enum decl for EGL_CONSUMER_METADATA_NV
DIAG: *** Emitting enum decl for EGL_PENDING_METADATA_NV
DIAG: *** Emitting enum decl for EGL_METADATA0_SIZE_NV
DIAG: *** Emitting enum decl for EGL_METADATA1_SIZE_NV
DIAG: *** Emitting enum decl for EGL_METADATA2_SIZE_NV
DIAG: *** Emitting enum decl for EGL_METADATA3_SIZE_NV
DIAG: *** Emitting enum decl for EGL_METADATA0_TYPE_NV
DIAG: *** Emitting enum decl for EGL_METADATA1_TYPE_NV
DIAG: *** Emitting enum decl for EGL_METADATA2_TYPE_NV
DIAG: *** Emitting enum decl for EGL_METADATA3_TYPE_NV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLAttrib
DIAG: *** Skipping type EGLAttrib (already declared)
DIAG: *** Emitting command decl for eglQueryDisplayAttribNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglSetStreamMetadataNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryStreamMetadataNV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_origin
DIAG: *** Emitting enum decl for EGL_STREAM_FRAME_ORIGIN_X_NV
DIAG: *** Emitting enum decl for EGL_STREAM_FRAME_ORIGIN_Y_NV
DIAG: *** Emitting enum decl for EGL_STREAM_FRAME_MAJOR_AXIS_NV
DIAG: *** Emitting enum decl for EGL_CONSUMER_AUTO_ORIENTATION_NV
DIAG: *** Emitting enum decl for EGL_PRODUCER_AUTO_ORIENTATION_NV
DIAG: *** Emitting enum decl for EGL_LEFT_NV
DIAG: *** Emitting enum decl for EGL_RIGHT_NV
DIAG: *** Emitting enum decl for EGL_TOP_NV
DIAG: *** Emitting enum decl for EGL_BOTTOM_NV
DIAG: *** Emitting enum decl for EGL_X_AXIS_NV
DIAG: *** Emitting enum decl for EGL_Y_AXIS_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_remote
DIAG: *** Emitting enum decl for EGL_STREAM_STATE_INITIALIZING_NV
DIAG: *** Emitting enum decl for EGL_STREAM_TYPE_NV
DIAG: *** Emitting enum decl for EGL_STREAM_PROTOCOL_NV
DIAG: *** Emitting enum decl for EGL_STREAM_ENDPOINT_NV
DIAG: *** Emitting enum decl for EGL_STREAM_LOCAL_NV
DIAG: *** Emitting enum decl for EGL_STREAM_PRODUCER_NV
DIAG: *** Emitting enum decl for EGL_STREAM_CONSUMER_NV
DIAG: *** Emitting enum decl for EGL_STREAM_PROTOCOL_FD_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_reset
DIAG: *** Emitting enum decl for EGL_SUPPORT_RESET_NV
DIAG: *** Emitting enum decl for EGL_SUPPORT_REUSE_NV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Emitting command decl for eglResetStreamNV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_socket
DIAG: *** Emitting enum decl for EGL_STREAM_PROTOCOL_SOCKET_NV
DIAG: *** Emitting enum decl for EGL_SOCKET_HANDLE_NV
DIAG: *** Emitting enum decl for EGL_SOCKET_TYPE_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_socket_inet
DIAG: *** Emitting enum decl for EGL_SOCKET_TYPE_INET_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_socket_unix
DIAG: *** Emitting enum decl for EGL_SOCKET_TYPE_UNIX_NV
DIAG: *** PASS 2: Generating interface for EGL_NV_stream_sync
DIAG: *** Skipping enum EGL_SYNC_TYPE_KHR (already declared)
DIAG: *** Emitting enum decl for EGL_SYNC_NEW_FRAME_NV
DIAG: *** Generating required parameter type EGLSyncKHR
DIAG: *** Skipping type EGLSyncKHR (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLStreamKHR
DIAG: *** Skipping type EGLStreamKHR (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateStreamSyncNV
DIAG: *** PASS 2: Generating interface for EGL_NV_sync
DIAG: *** Emitting enum decl for EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV
DIAG: *** Emitting enum decl for EGL_SYNC_STATUS_NV
DIAG: *** Emitting enum decl for EGL_SIGNALED_NV
DIAG: *** Emitting enum decl for EGL_UNSIGNALED_NV
DIAG: *** Emitting enum decl for EGL_SYNC_FLUSH_COMMANDS_BIT_NV
DIAG: *** Emitting enum decl for EGL_FOREVER_NV
DIAG: *** Emitting enum decl for EGL_ALREADY_SIGNALED_NV
DIAG: *** Emitting enum decl for EGL_TIMEOUT_EXPIRED_NV
DIAG: *** Emitting enum decl for EGL_CONDITION_SATISFIED_NV
DIAG: *** Emitting enum decl for EGL_SYNC_TYPE_NV
DIAG: *** Emitting enum decl for EGL_SYNC_CONDITION_NV
DIAG: *** Emitting enum decl for EGL_SYNC_FENCE_NV
DIAG: *** Emitting enum decl for EGL_NO_SYNC_NV
DIAG: *** Generating required parameter type EGLSyncNV
DIAG: *** Emitting type decl for EGLSyncNV
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglCreateFenceSyncNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLSyncNV
DIAG: *** Skipping type EGLSyncNV (already declared)
DIAG: *** Emitting command decl for eglDestroySyncNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLSyncNV
DIAG: *** Skipping type EGLSyncNV (already declared)
DIAG: *** Emitting command decl for eglFenceNV
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLSyncNV
DIAG: *** Skipping type EGLSyncNV (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLTimeNV
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLTimeNV
DIAG: *** Emitting command decl for eglClientWaitSyncNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLSyncNV
DIAG: *** Skipping type EGLSyncNV (already declared)
DIAG: *** Generating required parameter type EGLenum
DIAG: *** Skipping type EGLenum (already declared)
DIAG: *** Emitting command decl for eglSignalSyncNV
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLSyncNV
DIAG: *** Skipping type EGLSyncNV (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglGetSyncAttribNV
DIAG: *** PASS 2: Generating interface for EGL_NV_system_time
DIAG: *** Generating required parameter type EGLuint64NV
DIAG: *** Generating required dependent type khrplatform
DIAG: *** Skipping type khrplatform (already declared)
DIAG: *** Emitting type decl for EGLuint64NV
DIAG: *** Emitting command decl for eglGetSystemTimeFrequencyNV
DIAG: *** Generating required parameter type EGLuint64NV
DIAG: *** Skipping type EGLuint64NV (already declared)
DIAG: *** Emitting command decl for eglGetSystemTimeNV
DIAG: *** PASS 2: Generating interface for EGL_NV_triple_buffer
DIAG: *** Emitting enum decl for EGL_TRIPLE_BUFFER_NV
DIAG: *** PASS 2: Generating interface for EGL_TIZEN_image_native_buffer
DIAG: *** Emitting enum decl for EGL_NATIVE_BUFFER_TIZEN
DIAG: *** PASS 2: Generating interface for EGL_TIZEN_image_native_surface
DIAG: *** Emitting enum decl for EGL_NATIVE_SURFACE_TIZEN
DIAG: *** PASS 2: Generating interface for EGL_WL_bind_wayland_display
DIAG: *** Emitting type decl for PFNEGLBINDWAYLANDDISPLAYWL
DIAG: *** Emitting type decl for PFNEGLUNBINDWAYLANDDISPLAYWL
DIAG: *** Emitting type decl for PFNEGLQUERYWAYLANDBUFFERWL
DIAG: *** Emitting enum decl for EGL_WAYLAND_BUFFER_WL
DIAG: *** Emitting enum decl for EGL_WAYLAND_PLANE_WL
DIAG: *** Emitting enum decl for EGL_TEXTURE_Y_U_V_WL
DIAG: *** Emitting enum decl for EGL_TEXTURE_Y_UV_WL
DIAG: *** Emitting enum decl for EGL_TEXTURE_Y_XUXV_WL
DIAG: *** Emitting enum decl for EGL_TEXTURE_EXTERNAL_WL
DIAG: *** Emitting enum decl for EGL_WAYLAND_Y_INVERTED_WL
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type wl_display
DIAG: *** Emitting type decl for wl_display
DIAG: *** Emitting command decl for eglBindWaylandDisplayWL
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type wl_display
DIAG: *** Skipping type wl_display (already declared)
DIAG: *** Emitting command decl for eglUnbindWaylandDisplayWL
DIAG: *** Generating required parameter type EGLBoolean
DIAG: *** Skipping type EGLBoolean (already declared)
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type wl_resource
DIAG: *** Emitting type decl for wl_resource
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Generating required parameter type EGLint
DIAG: *** Skipping type EGLint (already declared)
DIAG: *** Emitting command decl for eglQueryWaylandBufferWL
DIAG: *** PASS 2: Generating interface for EGL_WL_create_wayland_buffer_from_image
DIAG: *** Emitting type decl for PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL
DIAG: *** Generating required parameter type wl_buffer
DIAG: *** Emitting type decl for wl_buffer
DIAG: *** Generating required parameter type EGLDisplay
DIAG: *** Skipping type EGLDisplay (already declared)
DIAG: *** Generating required parameter type EGLImageKHR
DIAG: *** Skipping type EGLImageKHR (already declared)
DIAG: *** Emitting command decl for eglCreateWaylandBufferFromImageWL
