Name

  EXT_resource_recover

Name Strings

  EGL_EXT_resource_recover

Contributors

  Daniel Herring

Contacts

  Daniel Herring, Core Avionics & Industrial Inc., daniel dot herring at coreavi dot com

Status

  Draft

Version
  Version 0.3 October 18, 2018

Number

  EGL Extension #TBD

Dependencies

  Requires EGL 1.0, and EGL_EXT_Compositor

  This extension is written against the wording of the EGL 1.4
  Specification - April 6, 2011, but may be implemented against earlier
  versions.

Overview

  In systems which use static resource allocations and allow the operating system 
  or some other mechanism to shutdown processes which own rendering resources there
  needs to be a mechanism for recover of those resources. This extension aims to 
  provide an API to allow recovery of some of the rendering resources. 
  
  This extension builds on the semantics of the EGL_EXT_Compositor extension, and 
  is designed to provide the ability to reset individual rendering applications. 
  The EGL_EXT_Compositor extension allows a resource owner to be identified and
  allow that owner to force recovery of secondary context resources as well as
  off-screen window resources allowing them to be reused by another application 
  instance.
  
New Types

  None

New Tokens

  None

New Procedures and Functions

  EGLBoolean eglCompositorDetachContextEXT(EGLint external_ref_id)

  EGLBoolean eglCompositorDetachWindowEXT(EGLint external_win_id)
  
Modify the wording of Section 3.7.1 of the EGL 1.4 specification as modified by 
  EGL_EXT_Compositor

  From:
  EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT notifies EGL that this context is the only
  context allowed to render to a on screen window surface for this display. This
  attribute is followed in the attribute list by either EGL_TRUE or EGL_FALSE.
  EGL_EXTERNAL_REF_ID_EXT is followed by an external reference identifier which
  associates this context with the list of allowed contexts set by
  eglCompositorSetContextListEXT. If the reference identifier has already been
  used to initiate another call to eglCreateContext in any address space, this
  call shall fail and set the error EGL_BAD_ATTRIBUTE. IF the external reference
  identifier is not a valid identifier the error EGL_BAD_ATTRIBUTE shall be set
  and the call shall fail. If this attribute is set and the primary context has
  not yet been created then the error EGL_BAD_MATCH and the call shall fail.
  
  To:
  EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT notifies EGL that this context is the only
  context allowed to render to a on screen window surface for this display. This
  attribute is followed in the attribute list by either EGL_TRUE or EGL_FALSE.
  EGL_EXTERNAL_REF_ID_EXT is followed by an external reference identifier which
  associates this context with the list of allowed contexts set by
  eglCompositorSetContextListEXT. If the reference identifier has already been
  used to initiate another call to eglCreateContext in any address space, and 
  has not been detached by the primary context, then this call shall fail and set
  the error EGL_BAD_ATTRIBUTE. IF the external reference identifier is not a valid
  identifier the error EGL_BAD_ATTRIBUTE shall be set, and the call shall fail. If
  this attribute is set, and the primary context has not yet been created then the
  error EGL_BAD_MATCH and the call shall fail.

Add to the wording of section 3.5.1.

  After an off-screen window has been created and its resources recovered using 
  eglCompositorDetachWindowEXT its parameters may be fixed. Parameters set by 
  eglCompositorSetWindowAttributesEXT shall remain in effect. However, parameters 
  such as EGL_BUFFER_SIZE, EGL_RED_SIZE, EGL_GREEN_SIZE, EGL_BLUE_SIZE,  
  EGL_ALPHA_SIZE, EGL_RENDER_BUFFER_SIZE, EGL_DEPTH_SIZE, EGL_STENCIL_SIZE,
  EGL_SAMPLES, EGL_SAMPLE_BUFFERS may be fixed and unchangeable. If change of 
  these parameters are allowed it will likely be to allow them to be smaller.  
  
Add the function:

  EGLBoolean eglCompositorDetachContextEXT(EGLDisplay display, EGLint external_ref_id)
  
  This function is called to force the driver to detach the resources allocated to 
  the secondary context identified by external_ref_id. After this call is made, the 
  secondary context shall no longer be valid in the process it was created within.
  It will be as if eglDestroyContext was called from within said process. After this
  function succeeds any EGL calls using the secondary context shall fail and set the
  error EGL_CONTEXT_LOST, which will be returned by the next call to eglGetError.
  The secondary context may notice this destruction of the context either immediately
  or after the next call to an EGL function such as eglSwapBuffers.
  
  Resources which are allocated during normal operation within the context will be
  uninitialized at this time such that the next call to eglCreateContext with the 
  provided external_ref_id will succeed as if the secondary context had never been
  allocated to any process. Static resource allocations made by the driver for the 
  first use of the context defined by external_ref_id, such as those which may be 
  used in an OpenGL SC implementation, will be assigned to the new context upon 
  creation, and will be unitinitilazed. 
  
  If the secondary context was successfully detached and uninitialized then the 
  function will return EGL_TRUE. If the function fails it shall return EGL_FALSE and
  set an associated error. EGL_BAD_CONTEXT shall be returned if the external_ref_id
  parameter has not yet been used to create a secondary context, or the secondary 
  context has already been detached. EGL_BAD_PARAMETER shall be returned if the 
  external_ref_id parameter does not match one specified by 
  eglCompositorSetContextListEXT for the currently bound primary context.
  
Add the function:

  EGLBoolean eglCompositorDetachWindowEXT(EGLDisplay display, EGLint external_win_id,
                                                       EGLBoolean detach_all)
  
  This function is called to force the driver to detach the resources allocated to 
  the off-screen window identified by external_win_id. After this call is made, any
  secondary context which may have this surface bound shall reset its bound surface 
  state as if eglMakeCurrent was called with EGL_NO_SURFACE for its surface parameters,
  and eglDestroySurface was called. After this function succeeds any EGL calls using
  the off-screen window shall fail and set the error EGL_BAD_SURFACE. The secondary
  context may notice the destruction of the window surface immediately or after the 
  next call to an EGL function such as eglSwapBuffers.
  
  When detach_all is set to EGL_TRUE this function will cause all surfaces which are 
  owned by the same process which owns the specified window to be detached as well. 
  This is useful to reduce call overhead and to release any Pbuffer surfaces which
  may have been owned by the process which may have been terminated. When set to 
  EGL_FALSE this function will only detach the resources allocated to the specified
  off-screen window.
  
  Resources which are allocated to the window surface during normal operation will be
  uninitialized at this time such that the next call to eglCreateWindowSurface with 
  the provided external_win_id will succeed as if the off-screen window had never
  been allocated. Static resource allocations made by the driver for the first call
  to eglCreateWindowSurface will still be associated with the underlying window which
  is referred to by external_win_id. Thus allowing the static resource allocations 
  to be reused to prevent resource leaks (such as memory leaks) of static allocations. 
  
  If the off-screen window was successfully detached and uninitiliazed then the function
  will return EGL_TRUE. IF the function fails it shall return EGL_FALSE and set an 
  associated error. EGL_BAD_SURFACE shall be returned if the external_win_id parameter
  has not yet been used to create an off-screen window, or if the off-screen window 
  has already been detached. EGL_BAD_PARAMETER shall be returned if the external_win_id
  does not match one set using the function eglCompositorSetWindowListEXT.
  
Revision History
  Version 0.1, 13/08/2018 - first draft.
  Version 0.2, 24/08/2018 - Added detach_all parameter to eglCompositorDetachWindowEXT
  Version 0.3, 18/10/2018 - Removed requirement that these functions only be called from
                             the primary context, by adding a display parameter

Question:
Answer:
  
Comments: 
  The requirement to use these functions within the primary context was relaxed such that
  a health monitoring application other than the compositing application could monitor
  the off-screen rendering applications state and take the necessary corrective action 
  without needing to involve the compositing application.
  
  One such example use case is to have a single process fork and start the compositing 
  application and off-screen rendering applications and then monitor their state via a 
  call to the POSIX wait function and when an off-screen rendering application crashes
  the base process releases the resources and restarts the crashed application.
  
  